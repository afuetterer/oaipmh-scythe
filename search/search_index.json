{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#oaipmh-scythe-a-scythe-for-harvesting-oai-pmh-repositories","title":"oaipmh-scythe: A Scythe for harvesting OAI-PMH repositories.","text":"<p>Welcome to <code>oaipmh-scythe</code>, an updated and modernized version of the original sickle, now with additional features and ongoing maintenance.</p> CI Docs Package Meta <p><code>oaipmh-scythe</code> is a lightweight OAI-PMH client library written in Python. It has been designed for conveniently retrieving data from OAI interfaces the Pythonic way:</p> <pre><code>from oaipmh_scythe import Scythe\n\nwith Scythe(\"https://zenodo.org/oai2d\") as scythe:\n    records = scythe.list_records()\n    next(records)\n# &lt;Record oai:zenodo.org:4574771&gt;\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy harvesting of OAI-compliant interfaces</li> <li>Support for all six OAI verbs</li> <li>Convenient object representations of OAI items (records, headers, sets, ...)</li> <li>Automatic de-serialization of Dublin Core-encoded metadata payloads to Python dictionaries</li> <li>Option for ignoring deleted items</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python &gt;= 3.10</p> <p><code>oaipmh-scythe</code> is built with:</p> <ul> <li>httpx for issuing HTTP requests</li> <li>lxml for parsing XML responses</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>oaipmh-scythe</code> via pip from PyPI:</p> <pre><code>python -m pip install oaipmh-scythe\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is made with Material for MkDocs and is hosted by GitHub Pages.</p>"},{"location":"#similar-projects","title":"Similar Projects","text":"<p>There are a couple of similar projects available on PyPI and GitHub, e.g. via the topics oai-pmh and oai-pmh-client. Among them are these implementations in Python:</p> Project Description Last commit sickle <code>oaipmh-scythe</code> is a fork of <code>sickle</code> pyoai <code>sickle</code> was inspired by <code>pyoai</code> pyoaiharvester oai-pmh harvester CLI ddblabs-ometha oai-pmh harvester with CLI and TUI oai-harvest uses <code>pyoai</code> internally oai-pmh-harvester uses <code>sickle</code> internally <p>There are also similar projects available in Java and PHP.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>This is a fork of sickle which was originally written by Mathias Loesch.</p>"},{"location":"#license","title":"License","text":"<p><code>oaipmh-scythe</code> is distributed under the terms of the BSD license.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>This project adheres to Semantic Versioning. See conventional commits for commit guidelines.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#0130-2024-05-07","title":"0.13.0 (2024-05-07)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>client: make numeric arguments accept 'int | float' (#366) (<code>b53bbed</code>)</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>readme: add codeql badge (#365) (<code>eca3e3b</code>)</li> <li>tutorial: fix typo (#353) (<code>65f75b8</code>)</li> <li>add references to exceptions in docstrings (#351) (<code>4df8491</code>)</li> </ul>"},{"location":"changelog/#0121-2024-04-25","title":"0.12.1 (2024-04-25)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>exceptions: rename nometadataformat to nometadataformats (#349) (<code>255acb2</code>)</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>make all exceptions available in the main init file (#348) (<code>bad60ff</code>)</li> <li>client: set up explicit default encoding in httpx.Client (#330) (<code>25ef4cb</code>)</li> <li>iterator: rename params argument to query in itemiterator (#329) (<code>1de6cd5</code>)</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>add api reference pages for all modules (#344) (<code>8578031</code>)</li> <li>add python standard library inventory (#338) (<code>20d176c</code>)</li> </ul>"},{"location":"changelog/#0120-2024-04-04","title":"0.12.0 (2024-04-04)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>client: add authentication parameter (#316) (<code>035c0fe</code>)</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>readme: add download badges to readme (#294) (<code>c375ea9</code>)</li> <li>add pypi project version to release notes template (#282) (<code>c9d37ea</code>)</li> <li>update environment section in bug report template (#281) (<code>a2c225a</code>)</li> <li>add ci to types of changes in pr template (#272) (<code>f2745e7</code>)</li> <li>rename code of conduct (#270) (<code>1994bf3</code>)</li> <li>add license headers to documentation (#258) (<code>63aa318</code>)</li> </ul>"},{"location":"changelog/#0110-2024-01-25","title":"0.11.0 (2024-01-25)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>set up logging of http requests (#250) (<code>3df5ba1</code>)</li> </ul>"},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>update python version in contributor guide (#248) (<code>81366d8</code>)</li> <li>readme: add pypi downloads badge to readme (#243) (<code>1f87b18</code>)</li> <li>add initial citation.cff (#240) (<code>135a433</code>)</li> <li>readme: add pypi package information to readme (#237) (<code>ada4dcf</code>)</li> <li>readme: add minor improvements to readme (#234) (<code>9871491</code>)</li> <li>make urls in docstrings clickable (#233) (<code>55bf699</code>)</li> </ul>"},{"location":"changelog/#0100-2024-01-22","title":"0.10.0 (2024-01-22)","text":""},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>make request arguments explicit (#212) (<code>c61fab3</code>)</li> <li>remove request_args from scythe class and _request method (#199) (<code>2be27aa</code>)</li> <li>drop support for oai-pmh version 1.0 (#183) (<code>8644c4b</code>)</li> <li>drop support for python &lt; 3.10 (#180) (<code>cb3b99c</code>)</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>client: remove obsolete is_error_code() (#177) (<code>1e6dfe1</code>)</li> <li>add accept text/xml headers to client config (#155) (<code>4d92818</code>)</li> </ul>"},{"location":"changelog/#testing","title":"Testing","text":"<ul> <li>update getrecord example (#200) (<code>77c8ee6</code>)</li> </ul>"},{"location":"changelog/#documentation_4","title":"Documentation","text":"<ul> <li>update author name (<code>5f286e1</code>)</li> <li>readme: update required python version (<code>8237d2c</code>)</li> <li>readme: restyle project metadata table (#214) (<code>e2487cc</code>)</li> <li>readme: rephrase introduction about fork (#202) (<code>de65418</code>)</li> <li>add more alternatives (#192) (<code>5062a38</code>)</li> <li>add full changelog to release notes (#149) (<code>19a98f5</code>)</li> </ul>"},{"location":"changelog/#090-2023-11-18","title":"0.9.0 (2023-11-18)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>add context manager to scythe class (#144) (<code>d660f77</code>)</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance improvements","text":"<ul> <li>set up internal httpx.Client (#140) (<code>969e868</code>)</li> </ul>"},{"location":"changelog/#documentation_5","title":"Documentation","text":"<ul> <li>readme: add similar projects section (<code>f45781f</code>)</li> <li>readme: add acknowledgments section (<code>20ecd64</code>)</li> <li>readme: add short descriptions of requirements (<code>a573150</code>)</li> <li>remove outdated credits page (<code>47c80e8</code>)</li> <li>rename api docs page to client (<code>cf77d57</code>)</li> <li>change breaking changes heading (#138) (<code>69a8572</code>)</li> </ul>"},{"location":"changelog/#080-2023-11-16","title":"0.8.0 (2023-11-16)","text":"<p>Note: Rename project to oaipmh-scythe when forking it from mloesch/sickle to afuetterer/oaipmh-scythe</p>"},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>drop support for Python 2</li> <li>drop support for EOL Python 3.7 and below</li> <li>rename Sickle class to Scythe to reflect the change of the project name</li> <li>switch to PEP8 compliant names for methods (ListRecords() -&gt; list_records())</li> <li>remove .next() method from iterator classes</li> </ul>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>set up default custom user agent (oaipmh-scythe/{version})</li> </ul>"},{"location":"changelog/#performance-improvements_1","title":"Performance Improvements","text":"<ul> <li>make iterator classes yield their responses</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>switch from requests to httpx</li> <li>make BaseOAIIterator an ABC</li> <li>move version information to about.py</li> <li>add a custom base exception</li> </ul>"},{"location":"changelog/#testing_1","title":"Testing","text":"<ul> <li>switch from nose to pytest</li> <li>add tests for Python 3.8 - 3.12 in CI</li> <li>use canned responses from Zenodo to test harvesting logic (vcr.py)</li> </ul>"},{"location":"changelog/#documentation_6","title":"Documentation","text":"<ul> <li>update license text</li> <li>update authors and contributors</li> <li>update copyright notice in src files</li> <li>add contributor guide</li> <li>add security policy</li> <li>add issue and pull request templates</li> <li>add custom GitHub labels</li> <li>switch from Sphinx to mkdocs-material</li> <li>switch from Read the Docs to GitHub pages</li> <li>switch from reStructuredText to Markdown</li> <li>switch to Zenodo for harvesting examples</li> <li>update README badges</li> </ul>"},{"location":"changelog/#other","title":"Other","text":"<ul> <li>switch from Travis CI to Github actions for CI</li> <li>add scheduled dependency updates with Dependabot</li> <li>add pre-commit hooks (e.g. ruff, mypy)</li> <li>switch to src layout</li> <li>switch from setup.py to pyproject.toml</li> <li>switch to hatch for project setup</li> <li>add type annotations</li> <li>switch to Google style docstrings</li> <li>rename first tags of sickle project for consistency (e.g. v0.5 -&gt; 0.5.0)</li> <li>enable CodeQL scanning</li> <li>add OpenSSF Scorecard report</li> </ul>"},{"location":"changelog/#070-2020-05-17","title":"0.7.0 (2020-05-17)","text":"<ul> <li>method for record metadata extraction has been extracted (<code>Record.get_metadata()</code>) to make subclassing easier (mloesch/sickle#38)</li> <li>retryable HTTP status codes and default wait time between retries can be customized (mloesch/sickle#21 mloesch/sickle#41)</li> <li>retry logic has been fixed: <code>max_retries</code> parameter now refers to no. of retries, not counting the initial request anymore</li> <li>the default number of HTTP retries has been set to 0 (= no retries)</li> <li>fix for mloesch/sickle#39</li> </ul>"},{"location":"changelog/#065-2020-01-12","title":"0.6.5 (2020-01-12)","text":"<ul> <li>fix: repr methods where causing an exception on Python 3 (mloesch/sickle#30)</li> </ul>"},{"location":"changelog/#064-2018-10-02","title":"0.6.4 (2018-10-02)","text":"<ul> <li>fix: resumption token with empty body indicates last response (mloesch/sickle#25)</li> </ul>"},{"location":"changelog/#063-2018-04-08","title":"0.6.3 (2018-04-08)","text":"<ul> <li>fix unicode problems (issues 20 &amp; 22)</li> </ul>"},{"location":"changelog/#062-2017-08-11","title":"0.6.2 (2017-08-11)","text":"<ul> <li>missing datestamp and identifier elements in record header don\\'t break harvesting</li> <li>lxml resolve_entities disabled (http://lxml.de/FAQ.html#how-do-i-use-lxml-safely-as-a-web-service-endpoint)</li> </ul>"},{"location":"changelog/#061-2016-11-13","title":"0.6.1 (2016-11-13)","text":"<ul> <li>it is now possible to pass any keyword arguments to requests</li> <li>the encoding used to decode the server response can be overridden</li> </ul>"},{"location":"changelog/#050-2015-11-12","title":"0.5.0 (2015-11-12)","text":"<ul> <li>support for Python 3</li> <li>consider resumption tokens with empty tag bodies</li> </ul>"},{"location":"changelog/#040-2015-05-31","title":"0.4.0 (2015-05-31)","text":"<ul> <li>bug fix: resumptionToken parameter is exclusive</li> <li>added support for harvesting complete OAI-XML responses</li> </ul>"},{"location":"changelog/#030-2013-04-17","title":"0.3.0 (2013-04-17)","text":"<ul> <li>added support for protected OAI interfaces (basic authentication)</li> <li>made class mapping for OAI elements configurable</li> <li>added options for HTTP timeout and max retries</li> <li>added handling of HTTP 503 responses</li> </ul>"},{"location":"changelog/#020-2013-02-26","title":"0.2.0 (2013-02-26)","text":"<ul> <li>OAI items are now represented as their own classes instead of XML elements</li> <li>library raises OAI-specific exceptions</li> <li>made lxml a required dependency</li> </ul>"},{"location":"changelog/#010-2013-02-20","title":"0.1.0 (2013-02-20)","text":"<p>First public release.</p>"},{"location":"contributing/","title":"Contributor Guide","text":""},{"location":"contributing/#contributing-to-oaipmh-scythe","title":"Contributing to oaipmh-scythe","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways.</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/afuetterer/oaipmh-scythe/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with feature and help wanted is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p><code>oaipmh-scythe</code> could always use more documentation, whether as part of the official <code>oaipmh-scythe</code> docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/afuetterer/oaipmh-scythe/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome.</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute?</p> <p>You need Python &gt;= 3.10 and hatch. You can install it globally with pipx:</p> <pre><code>$ pipx install hatch\n</code></pre> <p>or locally with (this will install it in the local virtual environment):</p> <pre><code>$ python -m pip install hatch\n</code></pre> <p>Here's how to set up <code>oaipmh-scythe</code> for local development.</p> <ol> <li> <p>Fork the oaipmh-scythe repository on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:username/oaipmh-scythe.git\n</code></pre> </li> <li> <p>Install your local copy into a virtual environment. Assuming you have hatch installed, this is how you set up your     fork for local development:</p> <pre><code>$ cd oaipmh-scythe\n$ hatch shell\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass pre-commit and the tests:</p> <pre><code>$ hatch run check\n$ hatch run cov\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub::</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a     docstring.</li> <li>The pull request should work for Python &gt;= 3.10. Check https://github.com/afuetterer/oaipmh-scythe/pulls and make     sure that all the tests pass.</li> </ol> <p>This contributor guide is adapted from cookiecutter-pypackage (BSD 3-Clause License).</p>"},{"location":"customizing/","title":"Harvesting other Metadata Formats than OAI-DC","text":""},{"location":"customizing/#harvesting-other-metadata-formats-than-oai-dc","title":"Harvesting other Metadata Formats than OAI-DC","text":"<p>By default, oaipmh-scythe's mapping of the record XML into Python dictionaries is tailored to work only with Dublin-Core-encoded metadata payloads. Other formats most probably won't be mapped correctly, especially if they are more hierarchically structured than Dublin Core.</p> <p>In case you want to harvest these more complex formats, you have to write your own record model class by subclassing the default implementation that unpacks the metadata XML:</p> <pre><code>from oaipmh_scythe.models import Record\n\n\nclass MyRecord(Record):\n    # Your XML unpacking implementation goes here.\n    pass\n</code></pre> <p>Note</p> <p>Take a look at the implementation of oaipmh_scythe.models.Record to get an idea of how to do this.</p> <p>Next, associate your implementation with OAI verbs in the oaipmh_scythe.client.Scythe object. In this case, we want the oaipmh_scythe.client.Scythe object to use our implementation to represent items returned by ListRecords and GetRecord responses:</p> <pre><code>scythe = Scythe(\"http://...\")\nscythe.class_mapping[\"ListRecords\"] = MyRecord\nscythe.class_mapping[\"GetRecord\"] = MyRecord\n</code></pre> <p>If you need to rewrite all item implementations, you can also provide a complete mapping to the oaipmh_scythe.client.Scythe object at instantiation:</p> <pre><code>my_mapping = {\n    \"ListRecords\": MyRecord,\n    \"GetRecord\": MyRecord,\n    # ...\n}\n\nscythe = Scythe(\"https://...\", class_mapping=my_mapping)\n</code></pre>"},{"location":"license/","title":"License","text":"<p>BSD 3-Clause License</p> <p>Copyright (c) 2013, Mathias Loesch Copyright (c) 2023, Heinz-Alexander F\u00fctterer</p> <p>Some rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright notice, this    list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,    this list of conditions and the following disclaimer in the documentation    and/or other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its    contributors may be used to endorse or promote products derived from    this software without specific prior written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"oaipmh/","title":"OAI-PMH Primer","text":""},{"location":"oaipmh/#oai-pmh-primer","title":"OAI-PMH Primer","text":"<p>This section gives a basic overview of the Open Archives Protocol for Metadata Harvesting (OAI-PMH). For more detailed information, please refer to the protocol specification.</p>"},{"location":"oaipmh/#glossary-of-important-oai-pmh-concepts","title":"Glossary of Important OAI-PMH Concepts","text":"<p>Repository</p> <p>A repository is a server-side application that exposes metadata via OAI-PMH.</p> <p>Harvester</p> <p>OAI-PMH client applications like <code>oaipmh-scythe</code> are called harvesters.</p> <p>record</p> <p>A record is the XML-encoded container for the metadata of a single publication item. It consists of a header and a metadata section.</p> <p>header</p> <p>The record header contains a unique identifier and a datestamp.</p> <p>metadata</p> <p>The record metadata contains the publication metadata in a defined metadata format.</p> <p>set</p> <p>A structure for grouping records for selective harvesting.</p> <p>harvesting</p> <p>The process of requesting records from the repository by the harvester.</p>"},{"location":"oaipmh/#oai-verbs","title":"OAI Verbs","text":"<p>OAI-PMH features six main API methods (so-called \"OAI verbs\") that can be issued by harvesters. Some verbs can be combined with further arguments:</p> <p><code>Identify</code></p> <p>Returns information about the repository. Arguments: None.</p> <p><code>GetRecord</code></p> <p>Returns a single record. Arguments:</p> <ul> <li><code>identifier</code> (the unique identifier of the record, required)</li> <li><code>metadataPrefix</code> (the prefix identifying the metadata format, required)</li> </ul> <p><code>ListRecords</code></p> <p>Returns the records in the repository in batches (possibly filtered by a timestamp or a <code>set</code>). Arguments:</p> <ul> <li><code>metadataPrefix</code> (the prefix identifying the metadata format, required)</li> <li><code>from</code> (the earliest timestamp of the records, optional)</li> <li><code>until</code> (the latest timestamp of the records, optional)</li> <li><code>set</code> (a set for selective harvesting, optional)</li> <li><code>resumptionToken</code> (used for getting the next result batch if the number of records returned by the previous request     exceeds the repository's maximum batch size, exclusive)</li> </ul> <p><code>ListIdentifiers</code></p> <p>Like <code>ListRecords</code> but returns only the record headers.</p> <p><code>ListSets</code></p> <p>Returns the list of sets supported by this repository. Arguments: None</p> <p><code>ListMetadataFormats</code></p> <p>Returns the list of metadata formats supported by this repository. Arguments: None</p>"},{"location":"oaipmh/#metadata-formats","title":"Metadata Formats","text":"<p>OAI interfaces may expose metadata records in multiple metadata formats. These formats are identified by so-called \"metadata prefixes\". For instance, the prefix <code>oai_dc</code> refers to the OAI-DC format, which by definition has to be exposed by every valid OAI interface. OAI-DC is based on the 15 metadata elements specified in the Dublin Core Metadata Element Set.</p> <p>Note</p> <p>oaipmh-scythe only supports the OAI-DC format out of the box. See the section on customizing for information on how to extend oaipmh-scythe for retrieving metadata in other formats.</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#tutorial","title":"Tutorial","text":"<p>This section gives a brief overview on how to use oaipmh-scythe for querying OAI interfaces.</p>"},{"location":"tutorial/#initializing-an-oai-pmh-interface","title":"Initializing an OAI-PMH Interface","text":"<p>To make a connection to an OAI-PMH interface, you need to import the Scythe class:</p> <pre><code>from oaipmh_scythe import Scythe\n</code></pre> <p>We initialize the connection by passing it the base URL. In our example, we use the OAI-PMH interface of Zenodo.</p> <p>It is recommended to use the Scythe class as a context manager to close established HTTP connections, when they are no longer needed.</p> <pre><code>with Scythe(\"https://zenodo.org/oai2d\") as scythe:\n    # ... some OAI-PMH harvesting operation(s)\n</code></pre> <p>If you want to instantiate the class directly, you can of course do so.</p> <pre><code>scythe = Scythe(\"https://zenodo.org/oai2d\")\n</code></pre> <p>In this case make sure to close the connection explicitly, when you are done harvesting.</p> <pre><code># ... some OAI-PMH harvesting operation(s)\nscythe.close()\n</code></pre>"},{"location":"tutorial/#issuing-requests","title":"Issuing Requests","text":"<p>oaipmh-scythe provides methods for each of the six OAI verbs (ListRecords, GetRecord, Identify, ListSets, ListMetadataFormats, ListIdentifiers).</p> <p>Start with a ListRecords request:</p> <pre><code>records = scythe.list_records()\n</code></pre> <p>Note that all keyword arguments you provide to this function are passed to the OAI interface as HTTP parameters. Therefore, the example request would send the parameter <code>verb=ListRecords</code>.</p>"},{"location":"tutorial/#performing-selective-harvesting","title":"Performing Selective Harvesting","text":""},{"location":"tutorial/#harvesting-records-based-on-publication-date","title":"Harvesting Records Based on Publication Date","text":"<p>To selectively harvest records within a specific publication date range, the list_records() and list_identifiers() methods of the Scythe client can be utilized with <code>from_</code> and <code>until</code> parameters. These parameters allow you to specify the lower and upper bounds of the desired date range, respectively. The accepted date format is YYYY-MM-DD (<code>str</code>).</p>"},{"location":"tutorial/#using-the-from_-parameter","title":"Using the from_ Parameter","text":"<p>The <code>from_</code> parameter (note the trailing underscore) is used to set the lower bound of the publication date range.</p> <p>Note</p> <p>The trailing underscore is necessary because <code>from</code> is a reserved keyword in Python.</p> <p>Example: Fetching Records Published On or After a Specific Date</p> <pre><code>records = scythe.list_records(from_=\"2024-01-16\")\nnext(records)\n# &lt;Record oai:zenodo.org:10529175&gt;\n</code></pre> <p>In this example, <code>scythe.list_records(from_=\"2024-01-16\")</code> retrieves records published on or after January 16, 2024.</p>"},{"location":"tutorial/#using-the-until-parameter","title":"Using the until Parameter","text":"<p>The <code>until</code> parameter sets the upper bound for the publication date of the records, enabling you to fetch records published up to and including the specified date.</p> <p>Example: Fetching records published until a specific date</p> <pre><code>records = scythe.list_records(until=\"2024-01-17\")\nnext(records)\n# &lt;Record oai:zenodo.org:2217771&gt;\n</code></pre> <p>This line will harvest records published up to and including January 17, 2024.</p>"},{"location":"tutorial/#combining-from_-and-until","title":"Combining from_ and until","text":"<p>Both <code>from_</code> and <code>until</code> parameters can be used together to define a specific date range for harvesting records.</p> <p>Example: Fetching records within a specific date range</p> <pre><code>records = scythe.list_records(from_=\"2024-01-16\", until=\"2024-01-17\")\nnext(records)\n# &lt;Record oai:zenodo.org:10517528&gt;\n</code></pre> <p>Here, <code>scythe.list_records(from_=\"2024-01-16\", until=\"2024-01-17\")</code> fetches records published between January 16 and January 17, 2024, inclusive.</p>"},{"location":"tutorial/#harvesting-records-based-on-set-specification","title":"Harvesting Records based on Set Specification","text":"<p>In addition to date-based filtering, the Scythe client offers the capability to selectively harvest records by specifying a set specification. This feature is particularly useful for fetching records that belong to a specific category or collection.</p>"},{"location":"tutorial/#using-the-set_-parameter","title":"Using the set_ Parameter","text":"<p>The <code>set_</code> parameter allows you to specify a particular set of records for harvesting.</p> <p>Note</p> <p>It is important to note the trailing underscore in <code>set_</code>. This is used because <code>set</code> is a reserved keyword in Python.</p> <p>Example: Fetching records from a specific set</p> <pre><code>records = scythe.list_records(set_=\"software\")\nnext(records)\n# &lt;Record oai:zenodo.org:32712&gt;\n</code></pre> <p>In this example, <code>scythe.list_records(set_=\"software\")</code> retrieves records that are part of the 'software' set. The call to <code>next(records)</code> fetches the first record from the retrieved set.</p>"},{"location":"tutorial/#considerations-when-using-the-set_-parameter","title":"Considerations when using the set_ Parameter","text":"<p>Set Identifier: The value passed to the <code>set_</code> parameter should match the identifier used by the OAI-PMH service for the desired set. These identifiers are often predefined by the data provider and should be used as documented.</p> <p>Combining with Other Parameters: The <code>set_</code> parameter can be combined with other parameters like <code>from_</code> and <code>until</code> for more refined filtering. This allows for fetching records from a specific set within a certain date range.</p> <p>Example: Combining <code>set_</code> with Date Filters</p> <pre><code>records = scythe.list_records(set_=\"software\", from_=\"2024-01-01\", until=\"2024-01-31\")\nnext(records)\n# &lt;Record oai:zenodo.org:10456652&gt;\n</code></pre> <p>This code will harvest records from the 'software' set that were published in January 2024.</p>"},{"location":"tutorial/#default-metadata-format-and-specifying-custom-formats","title":"Default Metadata Format and Specifying Custom Formats","text":"<p>When harvesting records using the <code>Scythe</code> client, it's important to understand how metadata formats are handled. By default, if no specific metadata format is provided, <code>Scythe</code> retrieves records in the <code>oai_dc</code> format. This format is universally supported by all OAI-PMH repositories, ensuring broad compatibility.</p>"},{"location":"tutorial/#default-behavior-harvesting-in-oai_dc-format","title":"Default Behavior: Harvesting in oai_dc Format","text":"<p>If you do not specify a metadata format, scythe will automatically use the \"oai_dc\" metadata format. This is the Dublin Core format, a standard for simple and generic metadata representation.</p> <p>Example: Fetching records with default metadata format</p> <pre><code>records = scythe.list_records()\n</code></pre> <p>This code will harvest records using the default <code>oai_dc</code> metadata format. It is equivalent to using <code>scythe.list_records(metadata_prefix=\"oai_dc\")</code> explicitly.</p>"},{"location":"tutorial/#specifying-a-different-metadata-format","title":"Specifying a different Metadata Format","text":"<p>If you need to harvest records in a format other than \"oai_dc\", you can specify this with the <code>metadata_prefix</code> parameter. Note that the format you request must be supported by the OAI-PMH repository you are querying.</p>"},{"location":"tutorial/#listing-available-metadata-formats","title":"Listing Available Metadata Formats","text":"<p>Before specifying a different format, you can check the available formats using the list_metadata_formats method:</p> <pre><code>metadata_formats = scythe.list_metadata_formats()\nfor metadata_format in metadata_formats:\n    print(metadata_format)\n</code></pre> <p>Example: Fetching records in a custom metadata format</p> <pre><code>records = scythe.list_records(metadata_prefix=\"datacite\")\n</code></pre> <p>In this example, <code>scythe.list_records(metadata_prefix=\"datacite\")</code> retrieves records in the \"datacite\" metadata format.</p> <p>Note</p> <p>It's important to remember that in the absence of a specified <code>metadata_prefix</code>, scythe will default to using the \"oai_dc\" format. This ensures that you can always retrieve records even if the specific format requirements are not known.</p>"},{"location":"tutorial/#consecutive-harvesting","title":"Consecutive Harvesting","text":"<p>Since most OAI verbs yield more than one element, their respective Scythe methods return iterator objects which can be used to iterate over the records of a repository:</p> <pre><code>records = scythe.list_records()\nnext(records)\n# &lt;Record oai:zenodo.org:4574771&gt;\n</code></pre> <p>Note that this works with all verbs that return more than one element. These are: list_records(), list_identifiers(), list_sets(), and list_metadata_formats().</p> <p>The following example shows how to iterate over the headers returned by <code>list_identifiers()</code>:</p> <pre><code>headers = scythe.list_identifiers()\nnext(headers)\n# &lt;Header oai:zenodo.org:4574771&gt;\n</code></pre> <p>Iterating over the sets returned by <code>list_sets()</code> works similarly:</p> <pre><code>sets = scythe.list_sets()\nnext(sets)\n# &lt;Set European Middleware Initiative&gt;\n</code></pre> <p>To explore all the metadata formats supported by the repository, you can iterate through the formats returned by the <code>list_metadata_formats()</code> method:</p> <pre><code>metadata_formats = scythe.list_metadata_formats()\nnext(metadata_formats)\n# &lt;MetadataFormat marcxml&gt;\n</code></pre>"},{"location":"tutorial/#getting-a-single-record","title":"Getting a Single Record","text":"<p>OAI-PMH allows you to get a single record by using the <code>GetRecord</code> verb:</p> <pre><code>scythe.get_record(identifier=\"oai:zenodo.org:4574771\")\n# &lt;Record oai:zenodo.org:4574771&gt;\n</code></pre>"},{"location":"tutorial/#harvesting-oai-items-vs-oai-responses","title":"Harvesting OAI Items vs. OAI Responses","text":"<p>Scythe supports two harvesting modes that differ in the type of the returned objects. The default mode returns OAI-specific items (records, headers etc.) encoded as Python objects as seen earlier. If you want to save the whole XML response returned by the server, you have to pass the OAIResponseIterator during the instantiation of the Scythe object:</p> <pre><code>from oaipmh_scythe.iterator import OAIResponseIterator\n\nscythe = Scythe(\"https://zenodo.org/oai2d\", iterator=OAIResponseIterator)\nresponses = scythe.list_records()\nnext(responses)\n# &lt;OAIResponse ListRecords&gt;\n</code></pre> <p>You could then save the returned responses to disk:</p> <pre><code>with open(\"response.xml\", \"w\") as f:\n    f.write(next(responses).raw.encode(\"utf-8\"))\n</code></pre>"},{"location":"tutorial/#ignoring-deleted-records","title":"Ignoring Deleted Records","text":"<p>The list_records() and list_identifiers() methods accept an optional parameter <code>ignore_deleted</code>. If set to <code>True</code>, the returned OAIItemIterator will skip deleted records/headers:</p> <pre><code>records = scythe.list_records(ignore_deleted=True)\n</code></pre> <p>Note</p> <p>This works only using the oaipmh_scythe.iterator.OAIItemIterator. If you use the oaipmh_scythe.iterator.OAIResponseIterator, the resulting OAI responses will still contain the deleted records.</p>"},{"location":"tutorial/#authentication","title":"Authentication","text":"<p>Certain OAI-PMH repositories may require authentication for accessing data or certain functionality. <code>oaipmh-scythe</code> provides support for HTTP Basic authentication and other methods, which can be used to authenticate requests made by the client.</p> <p>The <code>auth</code> parameter of the Scythe client allows you to specify an authentication method when creating a new instance of the client.</p>"},{"location":"tutorial/#http-basic-authentication","title":"HTTP Basic Authentication","text":"<p>To use HTTP basic authentication with the Scythe client, simply provide a tuple containing your username and password as the value for the <code>auth</code> parameter when instantiating the Scythe object:</p> <pre><code>auth = (\"username\", \"password\")\nscythe = Scythe(\"https://example.org/oai2d\", auth=auth)\n</code></pre> <p>Note</p> <p><code>oaipmh-scythe</code> uses httpx under the hood. The <code>auth</code> parameter accepts subclasses of <code>httpx.Auth</code>, e.g. <code>httpx.BasicAuth</code>, <code>httpx.DigestAuth</code>, or <code>httpx.NetRCAuth</code>, see Authentication - HTTPX for further information</p> <p>Once the authentication method is set, Scythe will use it to authenticate requests made by the client. This allows you to access restricted data or functionality from an OAI-PMH repository without having to handle authentication manually.</p>"},{"location":"api/client/","title":"Client","text":"<p>The client module provides a client interface for interacting with OAI-PMH services.</p> <p>This module defines the Scythe class, which facilitates the harvesting of records, identifiers, and sets from OAI-PMH compliant repositories. It handles various OAI-PMH requests, manages pagination with resumption tokens, and supports customizable error handling and retry logic.</p>"},{"location":"api/client/#oaipmh_scythe.client.Scythe","title":"<code>Scythe</code>","text":"<p>A client for interacting with OAI-PMH interfaces, facilitating the harvesting of records, identifiers, and sets.</p> <p>The Scythe class is designed to simplify the process of making OAI-PMH requests and processing the responses. It supports various OAI-PMH verbs and handles pagination through resumption tokens, error handling, and retry logic.</p> <p>Attributes:</p> Name Type Description <code>endpoint</code> <p>The base URL of the OAI-PMH service.</p> <code>http_method</code> <p>The HTTP method to use for requests (either 'GET' or 'POST').</p> <code>iterator</code> <p>The iterator class to be used for iterating over responses.</p> <code>max_retries</code> <p>The maximum number of retries for a request in case of failures.</p> <code>retry_status_codes</code> <p>The HTTP status codes on which to retry the request.</p> <code>default_retry_after</code> <p>The default wait time (in seconds) between retries if no 'retry-after' header is present.</p> <code>class_mapping</code> <p>A mapping from OAI verbs to classes representing OAI items.</p> <code>encoding</code> <p>The character encoding for decoding responses. Defaults to the server's specified encoding.</p> <code>auth</code> <p>Optional authentication credentials for accessing the OAI-PMH interface.</p> <code>timeout</code> <p>The timeout (in seconds) for HTTP requests.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; with Scythe(\"https://zenodo.org/oai2d\") as scythe:\n&gt;&gt;&gt;     records = scythe.list_records()\n&gt;&gt;&gt;     for record in records:\n&gt;&gt;&gt;         print(record)\n</code></pre> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>class Scythe:\n    \"\"\"A client for interacting with OAI-PMH interfaces, facilitating the harvesting of records, identifiers, and sets.\n\n    The Scythe class is designed to simplify the process of making OAI-PMH requests and processing the responses.\n    It supports various OAI-PMH verbs and handles pagination through resumption tokens, error handling, and retry logic.\n\n    Attributes:\n        endpoint: The base URL of the OAI-PMH service.\n        http_method: The HTTP method to use for requests (either 'GET' or 'POST').\n        iterator: The iterator class to be used for iterating over responses.\n        max_retries: The maximum number of retries for a request in case of failures.\n        retry_status_codes: The HTTP status codes on which to retry the request.\n        default_retry_after: The default wait time (in seconds) between retries if no 'retry-after' header is present.\n        class_mapping: A mapping from OAI verbs to classes representing OAI items.\n        encoding: The character encoding for decoding responses. Defaults to the server's specified encoding.\n        auth: Optional authentication credentials for accessing the OAI-PMH interface.\n        timeout: The timeout (in seconds) for HTTP requests.\n\n    Examples:\n        &gt;&gt;&gt; with Scythe(\"https://zenodo.org/oai2d\") as scythe:\n        &gt;&gt;&gt;     records = scythe.list_records()\n        &gt;&gt;&gt;     for record in records:\n        &gt;&gt;&gt;         print(record)\n\n    \"\"\"\n\n    def __init__(\n        self,\n        endpoint: str,\n        http_method: str = \"GET\",\n        iterator: type[BaseOAIIterator] = OAIItemIterator,\n        max_retries: int = 0,\n        retry_status_codes: Iterable[int] | None = None,\n        default_retry_after: int | float = 60,\n        class_mapping: dict[str, type[OAIItem]] | None = None,\n        encoding: str = \"utf-8\",\n        auth: AuthTypes | None = None,\n        timeout: int | float = 60,\n    ):\n        self.endpoint = endpoint\n        if http_method not in (\"GET\", \"POST\"):\n            raise ValueError(\"Invalid HTTP method: %s! Must be GET or POST.\")\n        self.http_method = http_method\n        if inspect.isclass(iterator) and issubclass(iterator, BaseOAIIterator):\n            self.iterator = iterator\n        else:\n            raise TypeError(\"Argument 'iterator' must be subclass of %s\" % BaseOAIIterator.__name__)\n        self.max_retries = max_retries\n        self.retry_status_codes = retry_status_codes or (503,)\n        if default_retry_after &lt;= 0:\n            raise ValueError(\n                \"Invalid value for 'default_retry_after': %s. default_retry_after must be positive int or float.\"\n                % default_retry_after\n            )\n        self.default_retry_after = default_retry_after\n        self.oai_namespace = OAI_NAMESPACE\n        self.class_mapping = class_mapping or DEFAULT_CLASS_MAP\n        self.encoding = encoding\n        self.auth = auth\n        if timeout &lt;= 0:\n            raise ValueError(\"Invalid value for 'timeout': %s. Timeout must be positive int or float.\" % timeout)\n        self.timeout = timeout\n        self._client: httpx.Client | None = None\n\n    @property\n    def client(self) -&gt; httpx.Client:\n        \"\"\"Provide a reusable HTTP client instance for making requests.\n\n        This property ensures that an `httpx.Client` instance is created and maintained for\n        the lifecycle of the `Scythe` instance. It handles the creation of the client and\n        ensures that a new client is created if the existing one is closed.\n\n        Returns:\n            A reusable HTTP client instance for making HTTP requests.\n        \"\"\"\n        if self._client is None or self._client.is_closed:\n            headers = {\"Accept\": \"text/xml; charset=utf-8\", \"user-agent\": USER_AGENT}\n            self._client = httpx.Client(\n                headers=headers,\n                timeout=self.timeout,\n                auth=self.auth,\n                default_encoding=self.encoding,\n                event_hooks={\"response\": [log_response]},\n            )\n        return self._client\n\n    def close(self) -&gt; None:\n        \"\"\"Close the internal HTTP client if it exists and is open.\n\n        This method is responsible for explicitly closing the `httpx.Client` instance used\n        by the `Scythe` class. It should be called when the client is no longer needed, to\n        ensure proper cleanup and release of resources.\n\n        Note:\n            It's recommended to call this method at the end of operations or when the `Scythe`\n            instance is no longer in use, especially if it's not being used as a context manager.\n        \"\"\"\n        if self._client and not self._client.is_closed:\n            self._client.close()\n\n    def __enter__(self) -&gt; Scythe:\n        return self\n\n    def __exit__(\n        self, exc_type: type[BaseException] | None, exc_val: type[BaseException] | None, exc_tb: TracebackType | None\n    ) -&gt; None:\n        self.close()\n\n    def harvest(self, query: dict[str, str]) -&gt; OAIResponse:\n        \"\"\"Perform an HTTP request to the OAI server with the given parameters.\n\n        Send an OAI-PMH request to the server using the specified parameters. Handle retry logic\n        for failed requests based on the configured retry settings and response status codes.\n\n        Args:\n            query: A dictionary containing the request parameters.\n\n        Returns:\n            An OAIResponse object encapsulating the server's response.\n\n        Raises:\n            httpx.HTTPError: If the HTTP request fails after the maximum number of retries.\n        \"\"\"\n        http_response = self._request(query)\n        for _ in range(self.max_retries):\n            if httpx.codes.is_error(http_response.status_code) and http_response.status_code in self.retry_status_codes:\n                retry_after = self.get_retry_after(http_response)\n                logger.warning(\"HTTP %d! Retrying after %d seconds...\", http_response.status_code, retry_after)\n                time.sleep(retry_after)\n                http_response = self._request(query)\n        http_response.raise_for_status()\n        return OAIResponse(http_response, params=query)\n\n    def _request(self, query: dict[str, str]) -&gt; httpx.Response:\n        \"\"\"Send an HTTP request to the OAI server using the configured HTTP method and given query parameters.\n\n        Args:\n            query: A dictionary containing the request parameters.\n\n        Returns:\n            A Response object representing the server's response to the HTTP request.\n        \"\"\"\n        if self.http_method == \"GET\":\n            return self.client.get(self.endpoint, params=query)\n        return self.client.post(self.endpoint, data=query)\n\n    def list_records(\n        self,\n        from_: str | None = None,\n        until: str | None = None,\n        metadata_prefix: str = \"oai_dc\",\n        set_: str | None = None,\n        resumption_token: str | None = None,\n        ignore_deleted: bool = False,\n    ) -&gt; Iterator[OAIResponse | Record]:\n        \"\"\"Issue a ListRecords request to the OAI server.\n\n        Send a request to list records from the OAI server, allowing for selective harvesting based on date range,\n        set membership, and metadata format. This method supports pagination via resumption tokens and can optionally\n        ignore records marked as deleted.\n\n        Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#ListRecords&gt;\n\n        Args:\n            from_: An optional date string specifying the start of a date range for harvesting records.\n            until: An optional date string specifying the end of a date range for harvesting records.\n            metadata_prefix: The metadata format for the records to be harvested. Defaults to \"oai_dc\".\n            set_: An optional set identifier to restrict the harvest to records within a specific set.\n            resumption_token: An optional token for pagination, used to continue a request for the next page of records.\n            ignore_deleted: If True, skip records flagged as deleted in the response.\n\n        Yields:\n            An iterator over OAIResponse or Record objects, each representing an individual record or response\n                from the server.\n\n        Raises:\n            BadArgument: If the arguments provided do not conform to the expectations of the OAI server.\n            BadResumptionToken: If the provided resumption token is invalid or expired.\n            CannotDisseminateFormat: If the specified metadata_prefix is not supported by the OAI server.\n            NoRecordsMatch: If no records match the provided criteria.\n            NoSetHierarchy: If set-based harvesting is requested but the OAI server does not support sets.\n\n        \"\"\"\n        _query = {\n            \"verb\": \"ListRecords\",\n            \"from\": from_,\n            \"until\": until,\n            \"metadataPrefix\": metadata_prefix,\n            \"set\": set_,\n            \"resumptionToken\": resumption_token,\n        }\n        query = remove_none_values(filter_dict_except_resumption_token(_query))\n        yield from self.iterator(self, query, ignore_deleted=ignore_deleted)\n\n    def list_identifiers(\n        self,\n        from_: str | None = None,\n        until: str | None = None,\n        metadata_prefix: str = \"oai_dc\",\n        set_: str | None = None,\n        resumption_token: str | None = None,\n        ignore_deleted: bool = False,\n    ) -&gt; Iterator[OAIResponse | Header]:\n        \"\"\"Issue a ListIdentifiers request to the OAI server.\n\n        Send a request to list record identifiers from the OAI server. This method allows filtering records based on\n        date range, set membership, and metadata format. It also supports pagination through resumption tokens and has\n        an option to ignore deleted records.\n\n        Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#ListIdentifiers&gt;\n\n        Args:\n            from_: An optional date string specifying the start of a date range for harvesting records.\n            until: An optional date string specifying the end of a date range for harvesting records.\n            metadata_prefix: The metadata format for the records to be harvested. Defaults to \"oai_dc\".\n            set_: An optional set identifier to restrict the harvest to records within a specific set.\n            resumption_token: An optional token for pagination, used to continue a request for the next page of\n                identifiers.\n            ignore_deleted: If True, skip records flagged as deleted in the response.\n\n        Yields:\n            An iterator over OAIResponse or Header objects, each representing an individual record identifier\n                or response from the server.\n\n        Raises:\n            BadResumptionToken: If the provided resumption token is invalid or expired.\n            CannotDisseminateFormat: If the specified metadata_prefix is not supported by the OAI server.\n            NoRecordsMatch: If no records match the provided criteria.\n            NoSetHierarchy: If set-based harvesting is requested but the OAI server does not support sets.\n\n        \"\"\"\n        _query = {\n            \"verb\": \"ListIdentifiers\",\n            \"from\": from_,\n            \"until\": until,\n            \"metadataPrefix\": metadata_prefix,\n            \"set\": set_,\n            \"resumptionToken\": resumption_token,\n        }\n\n        query = remove_none_values(filter_dict_except_resumption_token(_query))\n        yield from self.iterator(self, query, ignore_deleted=ignore_deleted)\n\n    def list_sets(self, resumption_token: str | None = None) -&gt; Iterator[OAIResponse | Set]:\n        \"\"\"Issue a ListSets request to the OAI server.\n\n        Send a request to list all sets defined in the OAI server. Sets are used to categorize records in the OAI\n        repository. This method allows for the retrieval of these sets, optionally using a resumption token to handle\n        pagination.\n\n        Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#ListSets&gt;\n\n        Args:\n            resumption_token: An optional token for pagination, used to continue a request for the next batch of sets.\n\n        Yields:\n            An iterator over OAIResponse or Set objects, representing an individual set or response from the server.\n\n        Raises:\n            BadResumptionToken: If the provided resumption token is invalid or expired.\n            NoSetHierarchy: If the OAI server does not support sets or has no set hierarchy available.\n\n        \"\"\"\n        _query = {\n            \"verb\": \"ListSets\",\n            \"resumptionToken\": resumption_token,\n        }\n        query = remove_none_values(filter_dict_except_resumption_token(_query))\n        yield from self.iterator(self, query)\n\n    def identify(self) -&gt; Identify:\n        \"\"\"Issue an Identify request to the OAI server.\n\n        Send a request to identify the OAI server and retrieve its information. This includes details such as the repository name,\n        the base URL, the protocol version, and other relevant data about the OAI server. It's useful for understanding the\n        capabilities and configuration of the server.\n\n        Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#Identify&gt;\n\n        Returns:\n            An object encapsulating the server's identify response, which contains various pieces of information about\n                the OAI server.\n\n        \"\"\"\n        query = {\"verb\": \"Identify\"}\n        return Identify(self.harvest(query))\n\n    def get_record(self, identifier: str, metadata_prefix: str = \"oai_dc\") -&gt; OAIResponse | Record:\n        \"\"\"Issue a GetRecord request to the OAI server.\n\n        Send a request to the OAI server to retrieve a specific record. The request is constructed with the provided\n        identifier and metadata prefix. The method then processes and returns the relevant OAIResponse or Record object\n        using an iterator.\n\n\n        Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#GetRecord&gt;\n\n        Args:\n            identifier: A unique identifier for the record to be retrieved from the OAI server.\n            metadata_prefix: The metadata format to be returned for the record. Defaults to \"oai_dc\".\n\n        Returns:\n            An OAIResponse or Record object representing the requested record.\n\n        Raises:\n            CannotDisseminateFormat: If the specified metadata_prefix is not supported by the OAI server for\n                the requested record.\n            IdDoesNotExist: If the specified identifier does not correspond to any record in the OAI server.\n\n        \"\"\"\n        query = {\n            \"verb\": \"GetRecord\",\n            \"identifier\": identifier,\n            \"metadataPrefix\": metadata_prefix,\n        }\n        return next(iter(self.iterator(self, query)))\n\n    def list_metadata_formats(self, identifier: str | None = None) -&gt; Iterator[OAIResponse | MetadataFormat]:\n        \"\"\"Issue a ListMetadataFormats request to the OAI server.\n\n        Send a request to list the metadata formats available from the OAI server. This can be done for the entire\n        repository or for a specific record if an identifier is provided. The method constructs a query and yields an\n        iterator over OAIResponse or MetadataFormat objects, each representing a different metadata format or response\n        from the server.\n\n        Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#ListMetadataFormats&gt;\n\n        Args:\n            identifier: An optional unique identifier for a specific record to query available metadata formats.\n                        If None, all metadata formats available in the repository are listed.\n\n        Yields:\n            An iterator over OAIResponse or MetadataFormat objects, each representing an individual metadata format\n                or response from the server.\n\n        Raises:\n            IdDoesNotExist: If the specified identifier does not correspond to any record in the OAI server.\n            NoMetadataFormats: If there are no metadata formats available for the requested record or repository.\n\n        \"\"\"\n        _query = {\n            \"verb\": \"ListMetadataFormats\",\n            \"identifier\": identifier,\n        }\n        query = remove_none_values(_query)\n        yield from self.iterator(self, query)\n\n    def get_retry_after(self, http_response: httpx.Response) -&gt; int | float:\n        \"\"\"Determine the appropriate time to wait before retrying a request, based on the server's response.\n\n        Check the status code of the provided HTTP response. If it's 503 (Service Unavailable),\n        attempt to parse the 'retry-after' header to find the suggested wait time. If parsing fails\n        or a different status code is received, use the default retry time.\n\n        Args:\n            http_response: The HTTP response received from the server.\n\n        Returns:\n            An integer representing the number of seconds to wait before retrying the request.\n        \"\"\"\n        if http_response.status_code == httpx.codes.SERVICE_UNAVAILABLE:\n            try:\n                return int(http_response.headers.get(\"retry-after\"))\n            except TypeError:\n                return self.default_retry_after\n        return self.default_retry_after\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.client","title":"<code>client: httpx.Client</code>  <code>property</code>","text":"<p>Provide a reusable HTTP client instance for making requests.</p> <p>This property ensures that an <code>httpx.Client</code> instance is created and maintained for the lifecycle of the <code>Scythe</code> instance. It handles the creation of the client and ensures that a new client is created if the existing one is closed.</p> <p>Returns:</p> Type Description <code>Client</code> <p>A reusable HTTP client instance for making HTTP requests.</p>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.close","title":"<code>close()</code>","text":"<p>Close the internal HTTP client if it exists and is open.</p> <p>This method is responsible for explicitly closing the <code>httpx.Client</code> instance used by the <code>Scythe</code> class. It should be called when the client is no longer needed, to ensure proper cleanup and release of resources.</p> Note <p>It's recommended to call this method at the end of operations or when the <code>Scythe</code> instance is no longer in use, especially if it's not being used as a context manager.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"Close the internal HTTP client if it exists and is open.\n\n    This method is responsible for explicitly closing the `httpx.Client` instance used\n    by the `Scythe` class. It should be called when the client is no longer needed, to\n    ensure proper cleanup and release of resources.\n\n    Note:\n        It's recommended to call this method at the end of operations or when the `Scythe`\n        instance is no longer in use, especially if it's not being used as a context manager.\n    \"\"\"\n    if self._client and not self._client.is_closed:\n        self._client.close()\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.get_record","title":"<code>get_record(identifier, metadata_prefix='oai_dc')</code>","text":"<p>Issue a GetRecord request to the OAI server.</p> <p>Send a request to the OAI server to retrieve a specific record. The request is constructed with the provided identifier and metadata prefix. The method then processes and returns the relevant OAIResponse or Record object using an iterator.</p> <p>Ref: https://openarchives.org/OAI/openarchivesprotocol.html#GetRecord</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>A unique identifier for the record to be retrieved from the OAI server.</p> required <code>metadata_prefix</code> <code>str</code> <p>The metadata format to be returned for the record. Defaults to \"oai_dc\".</p> <code>'oai_dc'</code> <p>Returns:</p> Type Description <code>OAIResponse | Record</code> <p>An OAIResponse or Record object representing the requested record.</p> <p>Raises:</p> Type Description <code>CannotDisseminateFormat</code> <p>If the specified metadata_prefix is not supported by the OAI server for the requested record.</p> <code>IdDoesNotExist</code> <p>If the specified identifier does not correspond to any record in the OAI server.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def get_record(self, identifier: str, metadata_prefix: str = \"oai_dc\") -&gt; OAIResponse | Record:\n    \"\"\"Issue a GetRecord request to the OAI server.\n\n    Send a request to the OAI server to retrieve a specific record. The request is constructed with the provided\n    identifier and metadata prefix. The method then processes and returns the relevant OAIResponse or Record object\n    using an iterator.\n\n\n    Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#GetRecord&gt;\n\n    Args:\n        identifier: A unique identifier for the record to be retrieved from the OAI server.\n        metadata_prefix: The metadata format to be returned for the record. Defaults to \"oai_dc\".\n\n    Returns:\n        An OAIResponse or Record object representing the requested record.\n\n    Raises:\n        CannotDisseminateFormat: If the specified metadata_prefix is not supported by the OAI server for\n            the requested record.\n        IdDoesNotExist: If the specified identifier does not correspond to any record in the OAI server.\n\n    \"\"\"\n    query = {\n        \"verb\": \"GetRecord\",\n        \"identifier\": identifier,\n        \"metadataPrefix\": metadata_prefix,\n    }\n    return next(iter(self.iterator(self, query)))\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.get_retry_after","title":"<code>get_retry_after(http_response)</code>","text":"<p>Determine the appropriate time to wait before retrying a request, based on the server's response.</p> <p>Check the status code of the provided HTTP response. If it's 503 (Service Unavailable), attempt to parse the 'retry-after' header to find the suggested wait time. If parsing fails or a different status code is received, use the default retry time.</p> <p>Parameters:</p> Name Type Description Default <code>http_response</code> <code>Response</code> <p>The HTTP response received from the server.</p> required <p>Returns:</p> Type Description <code>int | float</code> <p>An integer representing the number of seconds to wait before retrying the request.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def get_retry_after(self, http_response: httpx.Response) -&gt; int | float:\n    \"\"\"Determine the appropriate time to wait before retrying a request, based on the server's response.\n\n    Check the status code of the provided HTTP response. If it's 503 (Service Unavailable),\n    attempt to parse the 'retry-after' header to find the suggested wait time. If parsing fails\n    or a different status code is received, use the default retry time.\n\n    Args:\n        http_response: The HTTP response received from the server.\n\n    Returns:\n        An integer representing the number of seconds to wait before retrying the request.\n    \"\"\"\n    if http_response.status_code == httpx.codes.SERVICE_UNAVAILABLE:\n        try:\n            return int(http_response.headers.get(\"retry-after\"))\n        except TypeError:\n            return self.default_retry_after\n    return self.default_retry_after\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.harvest","title":"<code>harvest(query)</code>","text":"<p>Perform an HTTP request to the OAI server with the given parameters.</p> <p>Send an OAI-PMH request to the server using the specified parameters. Handle retry logic for failed requests based on the configured retry settings and response status codes.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>dict[str, str]</code> <p>A dictionary containing the request parameters.</p> required <p>Returns:</p> Type Description <code>OAIResponse</code> <p>An OAIResponse object encapsulating the server's response.</p> <p>Raises:</p> Type Description <code>HTTPError</code> <p>If the HTTP request fails after the maximum number of retries.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def harvest(self, query: dict[str, str]) -&gt; OAIResponse:\n    \"\"\"Perform an HTTP request to the OAI server with the given parameters.\n\n    Send an OAI-PMH request to the server using the specified parameters. Handle retry logic\n    for failed requests based on the configured retry settings and response status codes.\n\n    Args:\n        query: A dictionary containing the request parameters.\n\n    Returns:\n        An OAIResponse object encapsulating the server's response.\n\n    Raises:\n        httpx.HTTPError: If the HTTP request fails after the maximum number of retries.\n    \"\"\"\n    http_response = self._request(query)\n    for _ in range(self.max_retries):\n        if httpx.codes.is_error(http_response.status_code) and http_response.status_code in self.retry_status_codes:\n            retry_after = self.get_retry_after(http_response)\n            logger.warning(\"HTTP %d! Retrying after %d seconds...\", http_response.status_code, retry_after)\n            time.sleep(retry_after)\n            http_response = self._request(query)\n    http_response.raise_for_status()\n    return OAIResponse(http_response, params=query)\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.identify","title":"<code>identify()</code>","text":"<p>Issue an Identify request to the OAI server.</p> <p>Send a request to identify the OAI server and retrieve its information. This includes details such as the repository name, the base URL, the protocol version, and other relevant data about the OAI server. It's useful for understanding the capabilities and configuration of the server.</p> <p>Ref: https://openarchives.org/OAI/openarchivesprotocol.html#Identify</p> <p>Returns:</p> Type Description <code>Identify</code> <p>An object encapsulating the server's identify response, which contains various pieces of information about the OAI server.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def identify(self) -&gt; Identify:\n    \"\"\"Issue an Identify request to the OAI server.\n\n    Send a request to identify the OAI server and retrieve its information. This includes details such as the repository name,\n    the base URL, the protocol version, and other relevant data about the OAI server. It's useful for understanding the\n    capabilities and configuration of the server.\n\n    Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#Identify&gt;\n\n    Returns:\n        An object encapsulating the server's identify response, which contains various pieces of information about\n            the OAI server.\n\n    \"\"\"\n    query = {\"verb\": \"Identify\"}\n    return Identify(self.harvest(query))\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.list_identifiers","title":"<code>list_identifiers(from_=None, until=None, metadata_prefix='oai_dc', set_=None, resumption_token=None, ignore_deleted=False)</code>","text":"<p>Issue a ListIdentifiers request to the OAI server.</p> <p>Send a request to list record identifiers from the OAI server. This method allows filtering records based on date range, set membership, and metadata format. It also supports pagination through resumption tokens and has an option to ignore deleted records.</p> <p>Ref: https://openarchives.org/OAI/openarchivesprotocol.html#ListIdentifiers</p> <p>Parameters:</p> Name Type Description Default <code>from_</code> <code>str | None</code> <p>An optional date string specifying the start of a date range for harvesting records.</p> <code>None</code> <code>until</code> <code>str | None</code> <p>An optional date string specifying the end of a date range for harvesting records.</p> <code>None</code> <code>metadata_prefix</code> <code>str</code> <p>The metadata format for the records to be harvested. Defaults to \"oai_dc\".</p> <code>'oai_dc'</code> <code>set_</code> <code>str | None</code> <p>An optional set identifier to restrict the harvest to records within a specific set.</p> <code>None</code> <code>resumption_token</code> <code>str | None</code> <p>An optional token for pagination, used to continue a request for the next page of identifiers.</p> <code>None</code> <code>ignore_deleted</code> <code>bool</code> <p>If True, skip records flagged as deleted in the response.</p> <code>False</code> <p>Yields:</p> Type Description <code>OAIResponse | Header</code> <p>An iterator over OAIResponse or Header objects, each representing an individual record identifier or response from the server.</p> <p>Raises:</p> Type Description <code>BadResumptionToken</code> <p>If the provided resumption token is invalid or expired.</p> <code>CannotDisseminateFormat</code> <p>If the specified metadata_prefix is not supported by the OAI server.</p> <code>NoRecordsMatch</code> <p>If no records match the provided criteria.</p> <code>NoSetHierarchy</code> <p>If set-based harvesting is requested but the OAI server does not support sets.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def list_identifiers(\n    self,\n    from_: str | None = None,\n    until: str | None = None,\n    metadata_prefix: str = \"oai_dc\",\n    set_: str | None = None,\n    resumption_token: str | None = None,\n    ignore_deleted: bool = False,\n) -&gt; Iterator[OAIResponse | Header]:\n    \"\"\"Issue a ListIdentifiers request to the OAI server.\n\n    Send a request to list record identifiers from the OAI server. This method allows filtering records based on\n    date range, set membership, and metadata format. It also supports pagination through resumption tokens and has\n    an option to ignore deleted records.\n\n    Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#ListIdentifiers&gt;\n\n    Args:\n        from_: An optional date string specifying the start of a date range for harvesting records.\n        until: An optional date string specifying the end of a date range for harvesting records.\n        metadata_prefix: The metadata format for the records to be harvested. Defaults to \"oai_dc\".\n        set_: An optional set identifier to restrict the harvest to records within a specific set.\n        resumption_token: An optional token for pagination, used to continue a request for the next page of\n            identifiers.\n        ignore_deleted: If True, skip records flagged as deleted in the response.\n\n    Yields:\n        An iterator over OAIResponse or Header objects, each representing an individual record identifier\n            or response from the server.\n\n    Raises:\n        BadResumptionToken: If the provided resumption token is invalid or expired.\n        CannotDisseminateFormat: If the specified metadata_prefix is not supported by the OAI server.\n        NoRecordsMatch: If no records match the provided criteria.\n        NoSetHierarchy: If set-based harvesting is requested but the OAI server does not support sets.\n\n    \"\"\"\n    _query = {\n        \"verb\": \"ListIdentifiers\",\n        \"from\": from_,\n        \"until\": until,\n        \"metadataPrefix\": metadata_prefix,\n        \"set\": set_,\n        \"resumptionToken\": resumption_token,\n    }\n\n    query = remove_none_values(filter_dict_except_resumption_token(_query))\n    yield from self.iterator(self, query, ignore_deleted=ignore_deleted)\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.list_metadata_formats","title":"<code>list_metadata_formats(identifier=None)</code>","text":"<p>Issue a ListMetadataFormats request to the OAI server.</p> <p>Send a request to list the metadata formats available from the OAI server. This can be done for the entire repository or for a specific record if an identifier is provided. The method constructs a query and yields an iterator over OAIResponse or MetadataFormat objects, each representing a different metadata format or response from the server.</p> <p>Ref: https://openarchives.org/OAI/openarchivesprotocol.html#ListMetadataFormats</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str | None</code> <p>An optional unique identifier for a specific record to query available metadata formats.         If None, all metadata formats available in the repository are listed.</p> <code>None</code> <p>Yields:</p> Type Description <code>OAIResponse | MetadataFormat</code> <p>An iterator over OAIResponse or MetadataFormat objects, each representing an individual metadata format or response from the server.</p> <p>Raises:</p> Type Description <code>IdDoesNotExist</code> <p>If the specified identifier does not correspond to any record in the OAI server.</p> <code>NoMetadataFormats</code> <p>If there are no metadata formats available for the requested record or repository.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def list_metadata_formats(self, identifier: str | None = None) -&gt; Iterator[OAIResponse | MetadataFormat]:\n    \"\"\"Issue a ListMetadataFormats request to the OAI server.\n\n    Send a request to list the metadata formats available from the OAI server. This can be done for the entire\n    repository or for a specific record if an identifier is provided. The method constructs a query and yields an\n    iterator over OAIResponse or MetadataFormat objects, each representing a different metadata format or response\n    from the server.\n\n    Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#ListMetadataFormats&gt;\n\n    Args:\n        identifier: An optional unique identifier for a specific record to query available metadata formats.\n                    If None, all metadata formats available in the repository are listed.\n\n    Yields:\n        An iterator over OAIResponse or MetadataFormat objects, each representing an individual metadata format\n            or response from the server.\n\n    Raises:\n        IdDoesNotExist: If the specified identifier does not correspond to any record in the OAI server.\n        NoMetadataFormats: If there are no metadata formats available for the requested record or repository.\n\n    \"\"\"\n    _query = {\n        \"verb\": \"ListMetadataFormats\",\n        \"identifier\": identifier,\n    }\n    query = remove_none_values(_query)\n    yield from self.iterator(self, query)\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.list_records","title":"<code>list_records(from_=None, until=None, metadata_prefix='oai_dc', set_=None, resumption_token=None, ignore_deleted=False)</code>","text":"<p>Issue a ListRecords request to the OAI server.</p> <p>Send a request to list records from the OAI server, allowing for selective harvesting based on date range, set membership, and metadata format. This method supports pagination via resumption tokens and can optionally ignore records marked as deleted.</p> <p>Ref: https://openarchives.org/OAI/openarchivesprotocol.html#ListRecords</p> <p>Parameters:</p> Name Type Description Default <code>from_</code> <code>str | None</code> <p>An optional date string specifying the start of a date range for harvesting records.</p> <code>None</code> <code>until</code> <code>str | None</code> <p>An optional date string specifying the end of a date range for harvesting records.</p> <code>None</code> <code>metadata_prefix</code> <code>str</code> <p>The metadata format for the records to be harvested. Defaults to \"oai_dc\".</p> <code>'oai_dc'</code> <code>set_</code> <code>str | None</code> <p>An optional set identifier to restrict the harvest to records within a specific set.</p> <code>None</code> <code>resumption_token</code> <code>str | None</code> <p>An optional token for pagination, used to continue a request for the next page of records.</p> <code>None</code> <code>ignore_deleted</code> <code>bool</code> <p>If True, skip records flagged as deleted in the response.</p> <code>False</code> <p>Yields:</p> Type Description <code>OAIResponse | Record</code> <p>An iterator over OAIResponse or Record objects, each representing an individual record or response from the server.</p> <p>Raises:</p> Type Description <code>BadArgument</code> <p>If the arguments provided do not conform to the expectations of the OAI server.</p> <code>BadResumptionToken</code> <p>If the provided resumption token is invalid or expired.</p> <code>CannotDisseminateFormat</code> <p>If the specified metadata_prefix is not supported by the OAI server.</p> <code>NoRecordsMatch</code> <p>If no records match the provided criteria.</p> <code>NoSetHierarchy</code> <p>If set-based harvesting is requested but the OAI server does not support sets.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def list_records(\n    self,\n    from_: str | None = None,\n    until: str | None = None,\n    metadata_prefix: str = \"oai_dc\",\n    set_: str | None = None,\n    resumption_token: str | None = None,\n    ignore_deleted: bool = False,\n) -&gt; Iterator[OAIResponse | Record]:\n    \"\"\"Issue a ListRecords request to the OAI server.\n\n    Send a request to list records from the OAI server, allowing for selective harvesting based on date range,\n    set membership, and metadata format. This method supports pagination via resumption tokens and can optionally\n    ignore records marked as deleted.\n\n    Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#ListRecords&gt;\n\n    Args:\n        from_: An optional date string specifying the start of a date range for harvesting records.\n        until: An optional date string specifying the end of a date range for harvesting records.\n        metadata_prefix: The metadata format for the records to be harvested. Defaults to \"oai_dc\".\n        set_: An optional set identifier to restrict the harvest to records within a specific set.\n        resumption_token: An optional token for pagination, used to continue a request for the next page of records.\n        ignore_deleted: If True, skip records flagged as deleted in the response.\n\n    Yields:\n        An iterator over OAIResponse or Record objects, each representing an individual record or response\n            from the server.\n\n    Raises:\n        BadArgument: If the arguments provided do not conform to the expectations of the OAI server.\n        BadResumptionToken: If the provided resumption token is invalid or expired.\n        CannotDisseminateFormat: If the specified metadata_prefix is not supported by the OAI server.\n        NoRecordsMatch: If no records match the provided criteria.\n        NoSetHierarchy: If set-based harvesting is requested but the OAI server does not support sets.\n\n    \"\"\"\n    _query = {\n        \"verb\": \"ListRecords\",\n        \"from\": from_,\n        \"until\": until,\n        \"metadataPrefix\": metadata_prefix,\n        \"set\": set_,\n        \"resumptionToken\": resumption_token,\n    }\n    query = remove_none_values(filter_dict_except_resumption_token(_query))\n    yield from self.iterator(self, query, ignore_deleted=ignore_deleted)\n</code></pre>"},{"location":"api/client/#oaipmh_scythe.client.Scythe.list_sets","title":"<code>list_sets(resumption_token=None)</code>","text":"<p>Issue a ListSets request to the OAI server.</p> <p>Send a request to list all sets defined in the OAI server. Sets are used to categorize records in the OAI repository. This method allows for the retrieval of these sets, optionally using a resumption token to handle pagination.</p> <p>Ref: https://openarchives.org/OAI/openarchivesprotocol.html#ListSets</p> <p>Parameters:</p> Name Type Description Default <code>resumption_token</code> <code>str | None</code> <p>An optional token for pagination, used to continue a request for the next batch of sets.</p> <code>None</code> <p>Yields:</p> Type Description <code>OAIResponse | Set</code> <p>An iterator over OAIResponse or Set objects, representing an individual set or response from the server.</p> <p>Raises:</p> Type Description <code>BadResumptionToken</code> <p>If the provided resumption token is invalid or expired.</p> <code>NoSetHierarchy</code> <p>If the OAI server does not support sets or has no set hierarchy available.</p> Source code in <code>src/oaipmh_scythe/client.py</code> <pre><code>def list_sets(self, resumption_token: str | None = None) -&gt; Iterator[OAIResponse | Set]:\n    \"\"\"Issue a ListSets request to the OAI server.\n\n    Send a request to list all sets defined in the OAI server. Sets are used to categorize records in the OAI\n    repository. This method allows for the retrieval of these sets, optionally using a resumption token to handle\n    pagination.\n\n    Ref: &lt;https://openarchives.org/OAI/openarchivesprotocol.html#ListSets&gt;\n\n    Args:\n        resumption_token: An optional token for pagination, used to continue a request for the next batch of sets.\n\n    Yields:\n        An iterator over OAIResponse or Set objects, representing an individual set or response from the server.\n\n    Raises:\n        BadResumptionToken: If the provided resumption token is invalid or expired.\n        NoSetHierarchy: If the OAI server does not support sets or has no set hierarchy available.\n\n    \"\"\"\n    _query = {\n        \"verb\": \"ListSets\",\n        \"resumptionToken\": resumption_token,\n    }\n    query = remove_none_values(filter_dict_except_resumption_token(_query))\n    yield from self.iterator(self, query)\n</code></pre>"},{"location":"api/exceptions/","title":"Exceptions","text":"<p>The exceptions module defines exception classes for handling error scenarios encountered in OAI-PMH operations.</p> <p>These exception classes provide a structured way to capture and communicate specific errors that may occur while interacting with OAI-PMH services. Each class corresponds to a particular type of error defined in the OAI-PMH protocol, facilitating precise error handling and meaningful feedback in client applications.</p> <p>Classes:</p> Name Description <code>OAIPMHException</code> <p>The base exception class for all OAI-PMH related errors.</p> <code>GeneralOAIPMHError</code> <p>A general exception class for OAI-PMH errors not specifically covered by other classes.</p> <code>BadArgument</code> <p>Raised when a request contains illegal, missing, or improperly formatted arguments.</p> <code>BadVerb</code> <p>Raised when the verb argument in a request is invalid or improperly used.</p> <code>BadResumptionToken</code> <p>Raised when a resumption token is invalid or expired.</p> <code>CannotDisseminateFormat</code> <p>Raised when a requested metadata format is not supported.</p> <code>IdDoesNotExist</code> <p>Raised when an identifier does not exist or is illegal in a repository.</p> <code>NoSetHierarchy</code> <p>Raised when a repository does not support set hierarchies.</p> <code>NoMetadataFormats</code> <p>Raised when no metadata formats are available for an item.</p> <code>NoRecordsMatch</code> <p>Raised when a query yields no results due to specific argument combinations.</p> <p>These custom exceptions enhance the robustness and clarity of error handling in OAI-PMH client implementations, aligning closely with the protocol's standard error conditions.</p> <p>Ref: https://openarchives.org/OAI/openarchivesprotocol.html#ErrorConditions</p>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.BadArgument","title":"<code>BadArgument</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>Exception raised when the OAI-PMH request contains illegal or missing arguments or arguments with illegal syntax.</p> <p>This includes scenarios where arguments are repeated, missing, have illegal values, or their syntax is not compliant with the OAI-PMH specifications.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class BadArgument(OAIPMHException):\n    \"\"\"Exception raised when the OAI-PMH request contains illegal or missing arguments or arguments with illegal syntax.\n\n    This includes scenarios where arguments are repeated, missing, have illegal values,\n    or their syntax is not compliant with the OAI-PMH specifications.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.BadResumptionToken","title":"<code>BadResumptionToken</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>Exception raised when the resumptionToken argument in the OAI-PMH request is invalid or expired.</p> <p>Indicates issues with the value of the resumptionToken, such as expiration or incorrect formatting.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class BadResumptionToken(OAIPMHException):\n    \"\"\"Exception raised when the resumptionToken argument in the OAI-PMH request is invalid or expired.\n\n    Indicates issues with the value of the resumptionToken, such as expiration or incorrect formatting.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.BadVerb","title":"<code>BadVerb</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>Exception raised when the verb argument in the OAI-PMH request is invalid.</p> <p>This occurs if the verb value is not a legal OAI-PMH verb, the verb argument is missing, or if the verb argument is repeated in the request.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class BadVerb(OAIPMHException):\n    \"\"\"Exception raised when the verb argument in the OAI-PMH request is invalid.\n\n    This occurs if the verb value is not a legal OAI-PMH verb, the verb argument is missing,\n    or if the verb argument is repeated in the request.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.CannotDisseminateFormat","title":"<code>CannotDisseminateFormat</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>Exception raised when the requested metadata format is not supported.</p> <p>This error occurs if the metadata format identified by the metadataPrefix argument is not supported by either the requested item or the repository as a whole.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class CannotDisseminateFormat(OAIPMHException):\n    \"\"\"Exception raised when the requested metadata format is not supported.\n\n    This error occurs if the metadata format identified by the metadataPrefix argument is not\n    supported by either the requested item or the repository as a whole.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.GeneralOAIPMHError","title":"<code>GeneralOAIPMHError</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>General exception for context-specific OAI-PMH errors not covered by the other specific classes.</p> <p>This class is used for OAI-PMH errors that do not fall into the predefined categories of the other exception classes in this module.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class GeneralOAIPMHError(OAIPMHException):\n    \"\"\"General exception for context-specific OAI-PMH errors not covered by the other specific classes.\n\n    This class is used for OAI-PMH errors that do not fall into the predefined categories\n    of the other exception classes in this module.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.IdDoesNotExist","title":"<code>IdDoesNotExist</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>Exception raised when the specified identifier is unknown or illegal in the repository.</p> <p>Indicates that the value of the identifier argument does not correspond to any item in the repository or is not formulated correctly.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class IdDoesNotExist(OAIPMHException):\n    \"\"\"Exception raised when the specified identifier is unknown or illegal in the repository.\n\n    Indicates that the value of the identifier argument does not correspond to any item\n    in the repository or is not formulated correctly.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.NoMetadataFormats","title":"<code>NoMetadataFormats</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>Exception raised when there are no available metadata formats for the specified item.</p> <p>Indicates a lack of metadata formats that can be disseminated for the requested item.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class NoMetadataFormats(OAIPMHException):\n    \"\"\"Exception raised when there are no available metadata formats for the specified item.\n\n    Indicates a lack of metadata formats that can be disseminated for the requested item.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.NoRecordsMatch","title":"<code>NoRecordsMatch</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>Exception raised when a query does not yield any results.</p> <p>This error occurs when the combination of the 'from', 'until', 'set', and 'metadataPrefix' arguments in a request results in an empty list, indicating no matching records.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class NoRecordsMatch(OAIPMHException):\n    \"\"\"Exception raised when a query does not yield any results.\n\n    This error occurs when the combination of the 'from', 'until', 'set', and 'metadataPrefix'\n    arguments in a request results in an empty list, indicating no matching records.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.NoSetHierarchy","title":"<code>NoSetHierarchy</code>","text":"<p>             Bases: <code>OAIPMHException</code></p> <p>Exception raised when sets are not supported by the repository.</p> <p>This error indicates that the repository does not support the concept of set hierarchies.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class NoSetHierarchy(OAIPMHException):\n    \"\"\"Exception raised when sets are not supported by the repository.\n\n    This error indicates that the repository does not support the concept of set hierarchies.\n    \"\"\"\n</code></pre>"},{"location":"api/exceptions/#oaipmh_scythe.exceptions.OAIPMHException","title":"<code>OAIPMHException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Base exception class for all OAI-PMH related errors.</p> Source code in <code>src/oaipmh_scythe/exceptions.py</code> <pre><code>class OAIPMHException(Exception):\n    \"\"\"Base exception class for all OAI-PMH related errors.\"\"\"\n</code></pre>"},{"location":"api/iterator/","title":"Iterator","text":"<p>The iterator module provides classes for iterating over data retrieved from OAI-PMH services.</p> <p>This module includes the BaseOAIIterator, an abstract base class that defines a standard interface for OAI-PMH data iteration, along with its specialized subclasses. Each subclass is tailored to handle specific types of data such as records, identifiers, or sets, ensuring efficient and structured access to OAI-PMH responses.</p> <p>Classes:</p> Name Description <code>BaseOAIIterator</code> <p>An abstract base class for creating iterators over OAI-PMH data.</p> <code>OAIResponseIterator</code> <p>Iterates over OAI responses, handling pagination and resumption tokens.</p> <code>OAIItemIterator</code> <p>Provides iteration over specific OAI items like records, identifiers, and sets.</p>"},{"location":"api/iterator/#oaipmh_scythe.iterator.BaseOAIIterator","title":"<code>BaseOAIIterator</code>","text":"<p>             Bases: <code>ABC</code></p> <p>An abstract base class for iterators over various types of data aggregated through the OAI-PMH protocol.</p> <p>This class provides a common interface and implementation for iterating over records, identifiers, and sets obtained via OAI-PMH. It handles OAI-PMH's resumption token mechanism, allowing seamless iteration over potentially large sets of data.</p> <p>Parameters:</p> Name Type Description Default <code>scythe</code> <code>Scythe</code> <p>The Scythe instance used to perform OAI-PMH requests.</p> required <code>query</code> <code>dict[str, str]</code> <p>A dictionary of parameters specifying the details of the OAI-PMH request.</p> required <code>ignore_deleted</code> <code>bool</code> <p>A boolean flag indicating whether to ignore deleted records in the iteration.</p> <code>False</code> <p>Attributes:</p> Name Type Description <code>scythe</code> <p>The Scythe instance handling OAI-PMH requests.</p> <code>query</code> <p>The parameters for OAI-PMH requests.</p> <code>ignore_deleted</code> <p>Indicates whether deleted records should be ignored.</p> <code>verb</code> <code>str</code> <p>The OAI-PMH verb (e.g., 'ListRecords', 'ListIdentifiers') used in the request.</p> <code>oai_response</code> <code>OAIResponse | None</code> <p>The most recent OAIResponse received from the OAI server.</p> <code>resumption_token</code> <code>ResumptionToken | None</code> <p>The current resumption token, if any, for paginated results.</p> Source code in <code>src/oaipmh_scythe/iterator.py</code> <pre><code>class BaseOAIIterator(ABC):\n    \"\"\"An abstract base class for iterators over various types of data aggregated through the OAI-PMH protocol.\n\n    This class provides a common interface and implementation for iterating over records, identifiers,\n    and sets obtained via OAI-PMH. It handles OAI-PMH's resumption token mechanism, allowing seamless\n    iteration over potentially large sets of data.\n\n    Args:\n        scythe: The Scythe instance used to perform OAI-PMH requests.\n        query: A dictionary of parameters specifying the details of the OAI-PMH request.\n        ignore_deleted: A boolean flag indicating whether to ignore deleted records in the iteration.\n\n    Attributes:\n        scythe: The Scythe instance handling OAI-PMH requests.\n        query: The parameters for OAI-PMH requests.\n        ignore_deleted: Indicates whether deleted records should be ignored.\n        verb: The OAI-PMH verb (e.g., 'ListRecords', 'ListIdentifiers') used in the request.\n        oai_response: The most recent OAIResponse received from the OAI server.\n        resumption_token: The current resumption token, if any, for paginated results.\n    \"\"\"\n\n    def __init__(self, scythe: Scythe, query: dict[str, str], ignore_deleted: bool = False) -&gt; None:\n        self.scythe = scythe\n        self.query = query\n        self.ignore_deleted = ignore_deleted\n        self.verb: str = self.query[\"verb\"]\n        self.oai_response: OAIResponse | None = None\n        self.resumption_token: ResumptionToken | None = None\n        self._next_response()\n\n    @abstractmethod\n    def __iter__(self):\n        pass\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;{self.__class__.__name__} {self.verb}&gt;\"\n\n    def _get_resumption_token(self) -&gt; ResumptionToken | None:\n        \"\"\"Extract and store the resumption token from the latest OAI response.\n\n        This method parses the current OAI response to extract the resumption token, if available. The token is\n        used for fetching subsequent pages of results in a paginated OAI-PMH response.\n\n        Returns:\n            A ResumptionToken instance if a token is found in the response, otherwise None.\n        \"\"\"\n        ns = self.scythe.oai_namespace\n        if (\n            self.oai_response is not None\n            and (token_element := self.oai_response.xml.find(f\".//{ns}resumptionToken\")) is not None\n        ):\n            return ResumptionToken(\n                token=token_element.text,\n                cursor=token_element.attrib.get(\"cursor\"),  # type: ignore [arg-type]\n                complete_list_size=token_element.attrib.get(\"completeListSize\"),  # type: ignore [arg-type]\n                expiration_date=token_element.attrib.get(\"expirationDate\"),  # type: ignore [arg-type]\n            )\n        return None\n\n    def _next_response(self) -&gt; None:\n        \"\"\"Request the next batch of data from the OAI server using the current resumption token.\n\n        This method is used internally to handle the pagination of OAI-PMH responses. It updates the `oai_response`\n        attribute with the next batch of data from the server.\n\n        If an error is encountered in the OAI response, an appropriate exception is raised.\n        \"\"\"\n        if self.resumption_token and self.resumption_token.token:\n            self.query = {\"verb\": self.verb, \"resumptionToken\": self.resumption_token.token}\n        self.oai_response = self.scythe.harvest(self.query)\n\n        if (error := self.oai_response.xml.find(f\".//{self.scythe.oai_namespace}error\")) is not None:\n            code = str(error.attrib.get(\"code\", \"UNKNOWN\"))\n            description = error.text or \"\"\n            try:\n                exception_name = code[0].upper() + code[1:]\n                raise getattr(exceptions, exception_name)(description)\n            except AttributeError as exc:\n                raise exceptions.GeneralOAIPMHError(description) from exc\n        self.resumption_token = self._get_resumption_token()\n</code></pre>"},{"location":"api/iterator/#oaipmh_scythe.iterator.OAIItemIterator","title":"<code>OAIItemIterator</code>","text":"<p>             Bases: <code>BaseOAIIterator</code></p> <p>An iterator class for iterating over various types of OAI items aggregated via OAI-PMH.</p> <p>This iterator is designed to handle the iteration of specific OAI items, such as records or sets, from a repository. It extends the functionality of the BaseOAIIterator to parse and yield individual items from the OAI-PMH responses.</p> <p>Parameters:</p> Name Type Description Default <code>scythe</code> <code>Scythe</code> <p>The Scythe instance used for making OAI-PMH requests.</p> required <code>query</code> <code>dict[str, str]</code> <p>A dictionary of OAI-PMH request parameters.</p> required <code>ignore_deleted</code> <code>bool</code> <p>A boolean indicating whether to ignore deleted records in the response.</p> <code>False</code> Source code in <code>src/oaipmh_scythe/iterator.py</code> <pre><code>class OAIItemIterator(BaseOAIIterator):\n    \"\"\"An iterator class for iterating over various types of OAI items aggregated via OAI-PMH.\n\n    This iterator is designed to handle the iteration of specific OAI items, such as records or sets, from a repository.\n    It extends the functionality of the BaseOAIIterator to parse and yield individual items from the OAI-PMH responses.\n\n    Args:\n        scythe: The Scythe instance used for making OAI-PMH requests.\n        query: A dictionary of OAI-PMH request parameters.\n        ignore_deleted: A boolean indicating whether to ignore deleted records in the response.\n    \"\"\"\n\n    def __init__(self, scythe: Scythe, query: dict[str, str], ignore_deleted: bool = False) -&gt; None:\n        self.verb = query[\"verb\"]\n        self.mapper = scythe.class_mapping[self.verb]\n        self.element = VERBS_ELEMENTS[self.verb]\n        super().__init__(scythe, query, ignore_deleted)\n\n    def _next_response(self) -&gt; None:\n        \"\"\"Fetch and process the next response from the OAI server.\n\n        Override the BaseOAIIterator's _next_response method to parse and set up the iterator\n        for the specific elements (e.g. records, headers) based on the current resumption token.\n        \"\"\"\n        super()._next_response()\n        if self.oai_response is not None:\n            self._items = self.oai_response.xml.iterfind(f\".//{self.scythe.oai_namespace}{self.element}\")\n        else:\n            self._items = iter(())\n\n    def __iter__(self) -&gt; Iterator[OAIItem]:\n        \"\"\"Iterate over individual OAI items from the response.\n\n        Go through the items in the OAI-PMH response, applying any necessary mapping and handling\n        the exclusion of deleted records if specified. Automatically handle pagination through resumption tokens.\n\n        Yields:\n            OAIItem: The next OAI item (e.g., record, identifier, set) from the response.\n        \"\"\"\n        while True:\n            for item in self._items:\n                mapped = self.mapper(item)\n                if self.ignore_deleted and mapped.deleted:\n                    continue\n                yield mapped\n            if self.resumption_token and self.resumption_token.token:\n                self._next_response()\n            else:\n                return\n</code></pre>"},{"location":"api/iterator/#oaipmh_scythe.iterator.OAIItemIterator.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over individual OAI items from the response.</p> <p>Go through the items in the OAI-PMH response, applying any necessary mapping and handling the exclusion of deleted records if specified. Automatically handle pagination through resumption tokens.</p> <p>Yields:</p> Name Type Description <code>OAIItem</code> <code>OAIItem</code> <p>The next OAI item (e.g., record, identifier, set) from the response.</p> Source code in <code>src/oaipmh_scythe/iterator.py</code> <pre><code>def __iter__(self) -&gt; Iterator[OAIItem]:\n    \"\"\"Iterate over individual OAI items from the response.\n\n    Go through the items in the OAI-PMH response, applying any necessary mapping and handling\n    the exclusion of deleted records if specified. Automatically handle pagination through resumption tokens.\n\n    Yields:\n        OAIItem: The next OAI item (e.g., record, identifier, set) from the response.\n    \"\"\"\n    while True:\n        for item in self._items:\n            mapped = self.mapper(item)\n            if self.ignore_deleted and mapped.deleted:\n                continue\n            yield mapped\n        if self.resumption_token and self.resumption_token.token:\n            self._next_response()\n        else:\n            return\n</code></pre>"},{"location":"api/iterator/#oaipmh_scythe.iterator.OAIResponseIterator","title":"<code>OAIResponseIterator</code>","text":"<p>             Bases: <code>BaseOAIIterator</code></p> <p>An iterator class for iterating over OAI responses obtained via the OAI-PMH protocol.</p> <p>This iterator specifically handles the iteration of OAIResponse objects, allowing for seamless navigation through a sequence of responses returned by an OAI-PMH request. It utilizes the underlying mechanisms of the BaseOAIIterator, including handling of resumption tokens for paginated data.</p> Source code in <code>src/oaipmh_scythe/iterator.py</code> <pre><code>class OAIResponseIterator(BaseOAIIterator):\n    \"\"\"An iterator class for iterating over OAI responses obtained via the OAI-PMH protocol.\n\n    This iterator specifically handles the iteration of OAIResponse objects, allowing for seamless\n    navigation through a sequence of responses returned by an OAI-PMH request. It utilizes the\n    underlying mechanisms of the BaseOAIIterator, including handling of resumption tokens for paginated data.\n    \"\"\"\n\n    def __iter__(self) -&gt; Iterator[OAIResponse]:\n        \"\"\"Yield the next OAIResponse object from the server response sequence.\n\n        Enable the OAIResponseIterator to iterate over a series of OAIResponse objects, managing pagination\n        with resumption tokens. Continue yielding responses until no more data is available from the server.\n\n        Yields:\n            OAIResponse: The next available OAIResponse object in the sequence.\n        \"\"\"\n        while True:\n            if self.oai_response:\n                yield self.oai_response\n                self.oai_response = None\n            elif self.resumption_token and self.resumption_token.token:\n                self._next_response()\n            else:\n                return\n</code></pre>"},{"location":"api/iterator/#oaipmh_scythe.iterator.OAIResponseIterator.__iter__","title":"<code>__iter__()</code>","text":"<p>Yield the next OAIResponse object from the server response sequence.</p> <p>Enable the OAIResponseIterator to iterate over a series of OAIResponse objects, managing pagination with resumption tokens. Continue yielding responses until no more data is available from the server.</p> <p>Yields:</p> Name Type Description <code>OAIResponse</code> <code>OAIResponse</code> <p>The next available OAIResponse object in the sequence.</p> Source code in <code>src/oaipmh_scythe/iterator.py</code> <pre><code>def __iter__(self) -&gt; Iterator[OAIResponse]:\n    \"\"\"Yield the next OAIResponse object from the server response sequence.\n\n    Enable the OAIResponseIterator to iterate over a series of OAIResponse objects, managing pagination\n    with resumption tokens. Continue yielding responses until no more data is available from the server.\n\n    Yields:\n        OAIResponse: The next available OAIResponse object in the sequence.\n    \"\"\"\n    while True:\n        if self.oai_response:\n            yield self.oai_response\n            self.oai_response = None\n        elif self.resumption_token and self.resumption_token.token:\n            self._next_response()\n        else:\n            return\n</code></pre>"},{"location":"api/models/","title":"Models","text":"<p>The models module defines data structures for representing various components of the OAI-PMH protocol.</p> <p>This module includes classes that encapsulate different entities in OAI-PMH, such as resumption tokens and various types of OAI items. These classes provide structured representations of OAI-PMH elements, facilitating their manipulation and processing in client applications.</p> <p>Classes:</p> Name Description <code>ResumptionToken</code> <p>Represents a resumption token used in OAI-PMH for paginated data retrieval.</p> <code>OAIItem</code> <p>A base class for generic OAI items.</p> <code>Identify</code> <p>Represents an Identify response in OAI-PMH.</p> <code>Header</code> <p>Represents an OAI Header element.</p> <code>Record</code> <p>Represents an OAI Record element.</p> <code>Set</code> <p>Represents an OAI Set element.</p> <code>MetadataFormat</code> <p>Represents an OAI MetadataFormat element.</p>"},{"location":"api/models/#oaipmh_scythe.models.Header","title":"<code>Header</code>","text":"<p>             Bases: <code>OAIItem</code></p> <p>A class representing an OAI Header in the OAI-PMH protocol.</p> <p>The header contains essential information about a record, such as its identifier, datestamp, and set specifications. This class parses these details from the provided XML header element and makes them easily accessible as attributes.</p> <p>Parameters:</p> Name Type Description Default <code>header_element</code> <code>_Element</code> <p>The XML element representing the OAI header.</p> required <p>Attributes:</p> Name Type Description <code>deleted</code> <p>Indicates whether the record is marked as deleted in the OAI-PMH repository.</p> <code>identifier</code> <p>The unique identifier of the record in the OAI-PMH repository.</p> <code>datestamp</code> <p>The datestamp of the record, indicating when it was last updated.</p> <code>setSpecs</code> <p>A list of set specifications that the record belongs to.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>class Header(OAIItem):\n    \"\"\"A class representing an OAI Header in the OAI-PMH protocol.\n\n    The header contains essential information about a record, such as its identifier, datestamp,\n    and set specifications. This class parses these details from the provided XML header element\n    and makes them easily accessible as attributes.\n\n    Args:\n        header_element: The XML element representing the OAI header.\n\n    Attributes:\n        deleted: Indicates whether the record is marked as deleted in the OAI-PMH repository.\n        identifier: The unique identifier of the record in the OAI-PMH repository.\n        datestamp: The datestamp of the record, indicating when it was last updated.\n        setSpecs: A list of set specifications that the record belongs to.\n    \"\"\"\n\n    def __init__(self, header_element: etree._Element) -&gt; None:\n        super().__init__(header_element, strip_ns=True)\n        self.deleted = self.xml.attrib.get(\"status\") == \"deleted\"\n        _identifier_element = self.xml.find(f\"{self._oai_namespace}identifier\")\n        _datestamp_element = self.xml.find(f\"{self._oai_namespace}datestamp\")\n\n        self.identifier = getattr(_identifier_element, \"text\", None)\n        self.datestamp = getattr(_datestamp_element, \"text\", None)\n        self.setSpecs = [setSpec.text for setSpec in self.xml.findall(f\"{self._oai_namespace}setSpec\")]\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;Header {self.identifier}{' [deleted]' if self.deleted else ''}&gt;\"\n\n    def __iter__(self) -&gt; Iterator:\n        \"\"\"Iterate over the header information, yielding key-value pairs.\"\"\"\n        return iter(\n            [\n                (\"identifier\", self.identifier),\n                (\"datestamp\", self.datestamp),\n                (\"setSpecs\", self.setSpecs),\n            ]\n        )\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.Header.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over the header information, yielding key-value pairs.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>def __iter__(self) -&gt; Iterator:\n    \"\"\"Iterate over the header information, yielding key-value pairs.\"\"\"\n    return iter(\n        [\n            (\"identifier\", self.identifier),\n            (\"datestamp\", self.datestamp),\n            (\"setSpecs\", self.setSpecs),\n        ]\n    )\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.Identify","title":"<code>Identify</code>","text":"<p>             Bases: <code>OAIItem</code></p> <p>A class representing an Identify container in the OAI-PMH protocol.</p> <p>This class is specifically used for handling the response of an Identify request in OAI-PMH. It differs from other OAI entities in that it is initialized with an OAIResponse object rather than a direct XML element. The class parses the Identify information from the response and provides access to its individual components.</p> <p>Parameters:</p> Name Type Description Default <code>identify_response</code> <code>OAIResponse</code> <p>The response object from an Identify request. It should contain the XML representation of the Identify response.</p> required <p>Attributes:</p> Name Type Description <code>xml</code> <p>The XML element representing the Identify response.</p> <code>_identify_dict</code> <p>A dictionary containing the parsed Identify information.</p> <code>Dynamic</code> <code>Attributes</code> <p>Based on the content of the Identify response, additional attributes                 are dynamically set on this object. These can include attributes like                 repository name, base URL, protocol version, etc.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the Identify element is not found in the provided XML.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>class Identify(OAIItem):\n    \"\"\"A class representing an Identify container in the OAI-PMH protocol.\n\n    This class is specifically used for handling the response of an Identify request in OAI-PMH.\n    It differs from other OAI entities in that it is initialized with an OAIResponse object\n    rather than a direct XML element. The class parses the Identify information from the\n    response and provides access to its individual components.\n\n    Args:\n        identify_response: The response object from an Identify request.\n            It should contain the XML representation of the Identify response.\n\n    Attributes:\n        xml: The XML element representing the Identify response.\n        _identify_dict: A dictionary containing the parsed Identify information.\n        Dynamic Attributes: Based on the content of the Identify response, additional attributes\n                            are dynamically set on this object. These can include attributes like\n                            repository name, base URL, protocol version, etc.\n\n    Raises:\n        ValueError: If the Identify element is not found in the provided XML.\n    \"\"\"\n\n    def __init__(self, identify_response: OAIResponse) -&gt; None:\n        super().__init__(identify_response.xml, strip_ns=True)\n        identify_element = self.xml.find(f\".//{self._oai_namespace}Identify\")\n        if identify_element is None:\n            raise ValueError(\"Identify element not found in the XML.\")\n        self.xml = identify_element\n        self._identify_dict = xml_to_dict(self.xml, strip_ns=True)\n        for k, v in self._identify_dict.items():\n            setattr(self, k.replace(\"-\", \"_\"), v[0])\n\n    def __repr__(self) -&gt; str:\n        return \"&lt;Identify&gt;\"\n\n    def __iter__(self) -&gt; Iterator:\n        \"\"\"Iterate over the Identify information, yielding key-value pairs.\"\"\"\n        return iter(self._identify_dict.items())\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.Identify.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over the Identify information, yielding key-value pairs.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>def __iter__(self) -&gt; Iterator:\n    \"\"\"Iterate over the Identify information, yielding key-value pairs.\"\"\"\n    return iter(self._identify_dict.items())\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.MetadataFormat","title":"<code>MetadataFormat</code>","text":"<p>             Bases: <code>OAIItem</code></p> <p>A class representing a metadata format in the OAI-PMH protocol.</p> <p>This class handles the representation of a metadata format, which is an essential part of the OAI-PMH protocol. It parses the provided XML element to extract and store metadata format details such as the metadata prefix.</p> <p>Parameters:</p> Name Type Description Default <code>mdf_element</code> <code>_Element</code> <p>The XML element representing the metadata format. This element is parsed to extract metadata format details.</p> required <p>Attributes:</p> Name Type Description <code>metadataPrefix</code> <code>str | None</code> <p>The prefix of the metadata format, extracted from the XML element.</p> <code>_mdf_dict</code> <p>A dictionary containing the parsed metadata format details.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>class MetadataFormat(OAIItem):\n    \"\"\"A class representing a metadata format in the OAI-PMH protocol.\n\n    This class handles the representation of a metadata format, which is an essential part of the OAI-PMH protocol.\n    It parses the provided XML element to extract and store metadata format details such as the metadata prefix.\n\n    Args:\n        mdf_element: The XML element representing the metadata format. This element is parsed\n            to extract metadata format details.\n\n    Attributes:\n        metadataPrefix: The prefix of the metadata format, extracted from the XML element.\n        _mdf_dict: A dictionary containing the parsed metadata format details.\n    \"\"\"\n\n    def __init__(self, mdf_element: etree._Element) -&gt; None:\n        super().__init__(mdf_element, strip_ns=True)\n        self._mdf_dict = xml_to_dict(self.xml, strip_ns=True)\n        self.metadataPrefix: str | None = None\n        for k, v in self._mdf_dict.items():\n            setattr(self, k.replace(\"-\", \"_\"), v[0])\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;MetadataFormat {self.metadataPrefix}&gt;\"\n\n    def __iter__(self) -&gt; Iterator:\n        \"\"\"Iterate over the metadata format information, yielding key-value pairs.\"\"\"\n        return iter(self._mdf_dict.items())\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.MetadataFormat.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over the metadata format information, yielding key-value pairs.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>def __iter__(self) -&gt; Iterator:\n    \"\"\"Iterate over the metadata format information, yielding key-value pairs.\"\"\"\n    return iter(self._mdf_dict.items())\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.OAIItem","title":"<code>OAIItem</code>","text":"<p>A base class representing a generic item in the OAI-PMH protocol.</p> <p>This class provides a common structure for handling and manipulating XML data associated with different types of OAI-PMH items, such as records, headers, or sets.</p> <p>Attributes:</p> Name Type Description <code>xml</code> <p>The parsed XML element representing the OAI item.</p> <code>_strip_ns</code> <p>A flag indicating whether to remove the namespaces from the element names in the dictionary representation.</p> <code>_oai_namespace</code> <p>The namespace URI extracted from the XML element.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>class OAIItem:\n    \"\"\"A base class representing a generic item in the OAI-PMH protocol.\n\n    This class provides a common structure for handling and manipulating XML data\n    associated with different types of OAI-PMH items, such as records, headers, or sets.\n\n    Attributes:\n        xml: The parsed XML element representing the OAI item.\n        _strip_ns: A flag indicating whether to remove the namespaces from the element names\n            in the dictionary representation.\n        _oai_namespace: The namespace URI extracted from the XML element.\n    \"\"\"\n\n    def __init__(self, xml: etree._Element, strip_ns: bool = True) -&gt; None:\n        super().__init__()\n        self.xml = xml\n        self._strip_ns = strip_ns\n        self._oai_namespace = get_namespace(self.xml)\n\n    def __bytes__(self) -&gt; bytes:\n        return etree.tostring(self.xml, encoding=\"utf-8\")\n\n    def __str__(self) -&gt; str:\n        return etree.tostring(self.xml, encoding=\"unicode\")\n\n    @property\n    def raw(self) -&gt; str:\n        \"\"\"Return the original XML as a unicode string.\"\"\"\n        return etree.tostring(self.xml, encoding=\"unicode\")\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.OAIItem.raw","title":"<code>raw: str</code>  <code>property</code>","text":"<p>Return the original XML as a unicode string.</p>"},{"location":"api/models/#oaipmh_scythe.models.Record","title":"<code>Record</code>","text":"<p>             Bases: <code>OAIItem</code></p> <p>A class representing an OAI record in the OAI-PMH protocol.</p> <p>This class encapsulates a record element from an OAI-PMH response, handling its parsing, and providing structured access to its details, such as header information and metadata. It checks for the presence of the header and metadata elements and raises an error if the header is not found.</p> <p>Parameters:</p> Name Type Description Default <code>record_element</code> <code>_Element</code> <p>The XML element representing the OAI record.</p> required <code>strip_ns</code> <code>bool</code> <p>If True, namespaces are removed from the element names in the parsed metadata. Defaults to True.</p> <code>True</code> <p>Attributes:</p> Name Type Description <code>header</code> <p>An instance of the Header class representing the header information of the record.</p> <code>deleted</code> <p>Indicates whether the record is marked as deleted.</p> <code>metadata</code> <p>A dictionary representation of the record's metadata, if available and not deleted.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the header element is not found in the provided XML.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>class Record(OAIItem):\n    \"\"\"A class representing an OAI record in the OAI-PMH protocol.\n\n    This class encapsulates a record element from an OAI-PMH response, handling its parsing, and providing\n    structured access to its details, such as header information and metadata. It checks for the presence of\n    the header and metadata elements and raises an error if the header is not found.\n\n    Args:\n        record_element: The XML element representing the OAI record.\n        strip_ns: If True, namespaces are removed from the element names in the parsed metadata. Defaults to True.\n\n    Attributes:\n        header: An instance of the Header class representing the header information of the record.\n        deleted: Indicates whether the record is marked as deleted.\n        metadata: A dictionary representation of the record's metadata, if available and not deleted.\n\n    Raises:\n        ValueError: If the header element is not found in the provided XML.\n    \"\"\"\n\n    def __init__(self, record_element: etree._Element, strip_ns: bool = True) -&gt; None:\n        super().__init__(record_element, strip_ns=strip_ns)\n        header_element = self.xml.find(f\".//{self._oai_namespace}header\")\n        if header_element is None:\n            raise ValueError(\"Header element not found in the XML.\")\n        self.header = Header(header_element)\n        self.deleted = self.header.deleted\n        if not self.deleted:\n            self.metadata = self.get_metadata()\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;Record {self.header.identifier}{' [deleted]' if self.header.deleted else ''}&gt;\"\n\n    def __iter__(self) -&gt; Iterator:\n        \"\"\"Iterate over the record's metadata, yielding key-value pairs.\"\"\"\n        return iter(self.metadata.items())\n\n    def get_metadata(self):\n        \"\"\"Extract and return the record's metadata as a dictionary.\"\"\"\n        # We want to get record/metadata/&lt;container&gt;/*\n        # &lt;container&gt; would be the element ``dc``\n        # in the ``oai_dc`` case.\n        return xml_to_dict(\n            self.xml.find(\".//\" + self._oai_namespace + \"metadata\").getchildren()[0],\n            strip_ns=self._strip_ns,\n        )\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.Record.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over the record's metadata, yielding key-value pairs.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>def __iter__(self) -&gt; Iterator:\n    \"\"\"Iterate over the record's metadata, yielding key-value pairs.\"\"\"\n    return iter(self.metadata.items())\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.Record.get_metadata","title":"<code>get_metadata()</code>","text":"<p>Extract and return the record's metadata as a dictionary.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>def get_metadata(self):\n    \"\"\"Extract and return the record's metadata as a dictionary.\"\"\"\n    # We want to get record/metadata/&lt;container&gt;/*\n    # &lt;container&gt; would be the element ``dc``\n    # in the ``oai_dc`` case.\n    return xml_to_dict(\n        self.xml.find(\".//\" + self._oai_namespace + \"metadata\").getchildren()[0],\n        strip_ns=self._strip_ns,\n    )\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.ResumptionToken","title":"<code>ResumptionToken</code>  <code>dataclass</code>","text":"<p>A data class representing a resumption token in the OAI-PMH protocol.</p> <p>Resumption tokens are used for iterating over multiple sets of results in OAI-PMH harvest requests. This class encapsulates the typical components of a resumption token, including the token itself, cursor, complete list size, and an expiration date.</p> <p>Attributes:</p> Name Type Description <code>token</code> <code>str | None</code> <p>The actual resumption token used for continuing the iteration in subsequent OAI-PMH requests. Default is None.</p> <code>cursor</code> <code>str | None</code> <p>A marker indicating the current position in the list of results. Default is None.</p> <code>complete_list_size</code> <code>str | None</code> <p>The total number of records in the complete list of results. Default is None.</p> <code>expiration_date</code> <code>str | None</code> <p>The date and time when the resumption token expires. Default is None.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>@dataclass\nclass ResumptionToken:\n    \"\"\"A data class representing a resumption token in the OAI-PMH protocol.\n\n    Resumption tokens are used for iterating over multiple sets of results in OAI-PMH\n    harvest requests. This class encapsulates the typical components of a resumption token,\n    including the token itself, cursor, complete list size, and an expiration date.\n\n    Attributes:\n        token: The actual resumption token used for continuing the iteration in subsequent OAI-PMH requests.\n            Default is None.\n        cursor: A marker indicating the current position in the list of results. Default is None.\n        complete_list_size: The total number of records in the complete list of results. Default is None.\n        expiration_date: The date and time when the resumption token expires. Default is None.\n    \"\"\"\n\n    token: str | None = None\n    cursor: str | None = None\n    complete_list_size: str | None = None\n    expiration_date: str | None = None\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;ResumptionToken {self.token}&gt;\"\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.Set","title":"<code>Set</code>","text":"<p>             Bases: <code>OAIItem</code></p> <p>A class representing a set in the OAI-PMH protocol.</p> <p>This class encapsulates a set element from an OAI-PMH response and provides structured access to its details. It parses the set information from the provided XML element and dynamically sets attributes based on the parsed content.</p> <p>Parameters:</p> Name Type Description Default <code>set_element</code> <code>_Element</code> <p>The XML element representing the OAI set. The element is parsed to extract set details.</p> required <p>Attributes:</p> Name Type Description <code>setName</code> <code>str | None</code> <p>The name of the set, extracted from the set's XML element.</p> <code>_set_dict</code> <p>A dictionary containing the parsed set information.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>class Set(OAIItem):\n    \"\"\"A class representing a set in the OAI-PMH protocol.\n\n    This class encapsulates a set element from an OAI-PMH response and provides structured access to its details.\n    It parses the set information from the provided XML element and dynamically sets attributes\n    based on the parsed content.\n\n    Args:\n        set_element: The XML element representing the OAI set. The element is parsed to extract set details.\n\n    Attributes:\n        setName: The name of the set, extracted from the set's XML element.\n        _set_dict: A dictionary containing the parsed set information.\n    \"\"\"\n\n    def __init__(self, set_element: etree._Element) -&gt; None:\n        super().__init__(set_element, strip_ns=True)\n        self._set_dict = xml_to_dict(self.xml, strip_ns=True)\n        self.setName: str | None = None\n        for k, v in self._set_dict.items():\n            setattr(self, k.replace(\"-\", \"_\"), v[0])\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;Set {self.setName}&gt;\"\n\n    def __iter__(self) -&gt; Iterator:\n        \"\"\"Iterate over the set information, yielding key-value pairs.\"\"\"\n        return iter(self._set_dict.items())\n</code></pre>"},{"location":"api/models/#oaipmh_scythe.models.Set.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over the set information, yielding key-value pairs.</p> Source code in <code>src/oaipmh_scythe/models.py</code> <pre><code>def __iter__(self) -&gt; Iterator:\n    \"\"\"Iterate over the set information, yielding key-value pairs.\"\"\"\n    return iter(self._set_dict.items())\n</code></pre>"},{"location":"api/response/","title":"Response","text":"<p>The response module offers a structured representation of responses from OAI-PMH services.</p> <p>This module defines the OAIResponse class, which encapsulates the HTTP response from an OAI-PMH server, providing easy access to its content both as raw text and as parsed XML. It is designed to work seamlessly with various components of an OAI-PMH client, handling the nuances of OAI-PMH responses.</p>"},{"location":"api/response/#oaipmh_scythe.response.OAIResponse","title":"<code>OAIResponse</code>  <code>dataclass</code>","text":"<p>Represents a response received from an OAI server, encapsulating the raw HTTP response and parsed XML content.</p> <p>This class provides a structured way to access various aspects of an OAI server's response. It offers methods to retrieve the raw text of the response, parse it as XML, and obtain a string representation of the response that includes the OAI verb.</p> <p>Attributes:</p> Name Type Description <code>http_response</code> <code>Response</code> <p>The original HTTP response object from the OAI server.</p> <code>params</code> <code>dict[str, str]</code> <p>A dictionary of the OAI parameters used in the request that led to this response.</p> Source code in <code>src/oaipmh_scythe/response.py</code> <pre><code>@dataclass\nclass OAIResponse:\n    \"\"\"Represents a response received from an OAI server, encapsulating the raw HTTP response and parsed XML content.\n\n    This class provides a structured way to access various aspects of an OAI server's response.\n    It offers methods to retrieve the raw text of the response, parse it as XML,\n    and obtain a string representation of the response that includes the OAI verb.\n\n    Attributes:\n        http_response: The original HTTP response object from the OAI server.\n        params: A dictionary of the OAI parameters used in the request that led to this response.\n    \"\"\"\n\n    http_response: Response\n    params: dict[str, str]\n\n    @property\n    def raw(self) -&gt; str:\n        \"\"\"Return the raw text of the server's response as a unicode string.\"\"\"\n        return self.http_response.text\n\n    @property\n    def xml(self) -&gt; etree._Element:\n        \"\"\"Parse the server's response content and return it as an `etree._Element` object.\"\"\"\n        return etree.XML(self.http_response.content, parser=XMLParser)\n\n    def __str__(self) -&gt; str:\n        verb = self.params.get(\"verb\")\n        return f\"&lt;OAIResponse {verb}&gt;\"\n</code></pre>"},{"location":"api/response/#oaipmh_scythe.response.OAIResponse.raw","title":"<code>raw: str</code>  <code>property</code>","text":"<p>Return the raw text of the server's response as a unicode string.</p>"},{"location":"api/response/#oaipmh_scythe.response.OAIResponse.xml","title":"<code>xml: etree._Element</code>  <code>property</code>","text":"<p>Parse the server's response content and return it as an <code>etree._Element</code> object.</p>"},{"location":"api/utils/","title":"Utils","text":"<p>The utils module provides utility functions for handling XML data in the context of OAI-PMH services.</p> <p>This module includes functions essential for parsing and transforming XML data obtained from OAI-PMH responses. These utilities facilitate the extraction of namespaces and conversion of XML elements into more accessible data structures.</p> <p>Functions:</p> Name Description <code>log_response</code> <p>Log the details of an HTTP response.</p> <code>remove_none_values</code> <p>Remove keys from the dictionary where the value is <code>None</code>.</p> <code>filter_dict_except_resumption_token</code> <p>Filter keys from the dictionary, if resumption token is not <code>None</code>.</p> <code>get_namespace</code> <p>Extracts the namespace from an XML element.</p> <code>xml_to_dict</code> <p>Converts an XML tree or element into a dictionary representation.</p>"},{"location":"api/utils/#oaipmh_scythe.utils.filter_dict_except_resumption_token","title":"<code>filter_dict_except_resumption_token(d)</code>","text":"<p>Filter out keys with None values from a dictionary, with special handling for 'resumptionToken'.</p> <p>If 'resumptionToken' is present and not None, and there are other non-None keys, log a warning and retain only 'resumptionToken' and 'verb' keys. Otherwise, return a dictionary excluding any keys with None values.</p> <p>Parameters:</p> Name Type Description Default <code>d</code> <code>dict[str, Any | None]</code> <p>The dictionary to filter.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: A filtered dictionary based on the defined criteria.</p> Source code in <code>src/oaipmh_scythe/utils.py</code> <pre><code>def filter_dict_except_resumption_token(d: dict[str, Any | None]) -&gt; dict[str, Any]:\n    \"\"\"Filter out keys with None values from a dictionary, with special handling for 'resumptionToken'.\n\n    If 'resumptionToken' is present and not None, and there are other non-None keys, log a warning and\n    retain only 'resumptionToken' and 'verb' keys. Otherwise, return a dictionary excluding any keys\n    with None values.\n\n    Args:\n        d (dict[str, Any | None]): The dictionary to filter.\n\n    Returns:\n        dict[str, Any]: A filtered dictionary based on the defined criteria.\n    \"\"\"\n    allowed_keys = (\"verb\", \"resumptionToken\")\n    resumption_token_present = d[\"resumptionToken\"] is not None\n    non_empty_keys = [k for k, v in d.items() if v is not None and k not in allowed_keys]\n    if resumption_token_present and resumption_token_present:\n        logger.warning(\n            \"`resumption_token` should not be used in combination with other parameters. Dropping %s\", non_empty_keys\n        )\n        return {k: v for k, v in d.items() if k in allowed_keys}\n    return d\n</code></pre>"},{"location":"api/utils/#oaipmh_scythe.utils.get_namespace","title":"<code>get_namespace(element)</code>","text":"<p>Return the namespace URI of an XML element.</p> <p>Extracts and returns the namespace URI from the tag of the given XML element. The namespace URI is enclosed in curly braces at the start of the tag. If the element does not have a namespace, <code>None</code> is returned.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>_Element</code> <p>The XML element from which to extract the namespace.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>The namespace URI as a string if the element has a namespace, otherwise <code>None</code>.</p> Source code in <code>src/oaipmh_scythe/utils.py</code> <pre><code>def get_namespace(element: etree._Element) -&gt; str | None:\n    \"\"\"Return the namespace URI of an XML element.\n\n    Extracts and returns the namespace URI from the tag of the given XML element.\n    The namespace URI is enclosed in curly braces at the start of the tag.\n    If the element does not have a namespace, `None` is returned.\n\n    Args:\n        element: The XML element from which to extract the namespace.\n\n    Returns:\n        The namespace URI as a string if the element has a namespace, otherwise `None`.\n    \"\"\"\n    match = re.search(r\"(\\{.*\\})\", element.tag)\n    return match.group(1) if match else None\n</code></pre>"},{"location":"api/utils/#oaipmh_scythe.utils.log_response","title":"<code>log_response(response)</code>","text":"<p>Log the details of an HTTP response.</p> <p>This function logs the HTTP method, URL, and status code of the response for debugging purposes. It uses the 'debug' logging level to provide detailed diagnostic information.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The response object received from an HTTP request.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/oaipmh_scythe/utils.py</code> <pre><code>def log_response(response: httpx.Response) -&gt; None:\n    \"\"\"Log the details of an HTTP response.\n\n    This function logs the HTTP method, URL, and status code of the response for debugging purposes.\n    It uses the 'debug' logging level to provide detailed diagnostic information.\n\n    Args:\n        response: The response object received from an HTTP request.\n\n    Returns:\n        None\n    \"\"\"\n    logger.debug(\n        \"[http] Response: %s %s - Status %s\", response.request.method, response.request.url, response.status_code\n    )\n</code></pre>"},{"location":"api/utils/#oaipmh_scythe.utils.remove_none_values","title":"<code>remove_none_values(d)</code>","text":"<p>Remove keys from the dictionary where the value is <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>d</code> <code>dict[str, Any | None]</code> <p>The input dictionary.</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>A new dictionary with the same keys as the input dictionary but none values have been removed.</p> Source code in <code>src/oaipmh_scythe/utils.py</code> <pre><code>def remove_none_values(d: dict[str, Any | None]) -&gt; dict[str, Any]:\n    \"\"\"Remove keys from the dictionary where the value is `None`.\n\n    Args:\n        d: The input dictionary.\n\n    Returns:\n        A new dictionary with the same keys as the input dictionary but none values have been removed.\n    \"\"\"\n    return {key: value for key, value in d.items() if value is not None}\n</code></pre>"},{"location":"api/utils/#oaipmh_scythe.utils.xml_to_dict","title":"<code>xml_to_dict(tree, paths=None, nsmap=None, strip_ns=False)</code>","text":"<p>Convert an XML tree to a dictionary, with options for custom XPath and namespace handling.</p> <p>This function takes an XML element tree and converts it into a dictionary. The keys of the dictionary are the tags of the XML elements, and the values are lists of the text contents of these elements. It offers options to apply specific XPath expressions, handle namespaces, and optionally strip namespaces from the tags in the resulting dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>tree</code> <code>_Element</code> <p>The root element of the XML tree to be converted.</p> required <code>paths</code> <code>list[str] | None</code> <p>An optional list of XPath expressions to apply on the XML tree. If None or not provided, the function will consider all elements in the tree.</p> <code>None</code> <code>nsmap</code> <code>dict[str, str] | None</code> <p>An optional dictionary for namespace mapping, used to provide shorter, more readable paths in XPath expressions. If None or not provided, no namespace mapping is applied.</p> <code>None</code> <code>strip_ns</code> <code>bool</code> <p>A boolean flag indicating whether to remove namespaces from the element tags in the resulting dictionary. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict[str, list[str | None]]</code> <p>A dictionary where each key is an element tag (with or without namespace, based on</p> <code>dict[str, list[str | None]]</code> <p><code>strip_ns</code>) and each value is a list of strings representing the text content of</p> <code>dict[str, list[str | None]]</code> <p>each element with that tag.</p> Source code in <code>src/oaipmh_scythe/utils.py</code> <pre><code>def xml_to_dict(\n    tree: etree._Element, paths: list[str] | None = None, nsmap: dict[str, str] | None = None, strip_ns: bool = False\n) -&gt; dict[str, list[str | None]]:\n    \"\"\"Convert an XML tree to a dictionary, with options for custom XPath and namespace handling.\n\n    This function takes an XML element tree and converts it into a dictionary. The keys of the\n    dictionary are the tags of the XML elements, and the values are lists of the text contents\n    of these elements. It offers options to apply specific XPath expressions, handle namespaces,\n    and optionally strip namespaces from the tags in the resulting dictionary.\n\n    Args:\n        tree: The root element of the XML tree to be converted.\n        paths: An optional list of XPath expressions to apply on the XML tree. If None or not\n            provided, the function will consider all elements in the tree.\n        nsmap: An optional dictionary for namespace mapping, used to provide shorter, more\n            readable paths in XPath expressions. If None or not provided, no namespace\n            mapping is applied.\n        strip_ns: A boolean flag indicating whether to remove namespaces from the element tags\n            in the resulting dictionary. Defaults to False.\n\n    Returns:\n        A dictionary where each key is an element tag (with or without namespace, based on\n        `strip_ns`) and each value is a list of strings representing the text content of\n        each element with that tag.\n    \"\"\"\n    paths = paths or [\".//\"]\n    nsmap = nsmap or {}\n    fields = defaultdict(list)\n    for path in paths:\n        elements = tree.findall(path, nsmap)\n        for element in elements:\n            tag = re.sub(r\"\\{.*\\}\", \"\", element.tag) if strip_ns else element.tag\n            fields[tag].append(element.text)\n    return dict(fields)\n</code></pre>"}]}